#!/bin/bash

set -x

source {{ overcloudrc }}
resources_type={{ resources_type  }}
openstack quota set --cores -1 --instances -1 --volumes -1  --networks -1 --subnets -1 --ports -1 --routers -1 --ram -1 --secgroups -1 --floating-ips -1 admin

image_name={{ image_name }}
flavor_name={{ flavor_name }}
openstack image show $image_name
if [ "$?" != "0" ]
then
    if [[ "$resources_type" =~ "sriov" ]] || [[ "$resources_type" =~ "trunk" ]]
    then
	image_url=http://download.devel.redhat.com/rhel-8/rel-eng/updates/RHEL-8/RHEL-8.2.0-updates-20200422.1/compose/BaseOS/x86_64/images/rhel-guest-image-8.2-326.x86_64.qcow2
	image_os='rhel-8'
	server_user_name='cloud-user'
    else
	image_url=https://github.com/cirros-dev/cirros/releases/download/0.5.2/cirros-0.5.2-x86_64-disk.img
	image_os=cirros
	server_user_name=cirros
    fi

    if [ ! -f workload_image ]
    then
        curl -Lo workload_image $image_url
    fi

    image_name="$image_os-ovn-migration-{{ resource_suffix }}"
    openstack image create $image_name  --file workload_image \
--disk-format qcow2 --container-format bare --public
else
    server_user_name={{ server_user_name }}
fi

if [[ "$image_name" =~ "cirros" ]]
then
    ram=128
    disk=1
else
    ram=1024
    disk=10
fi
openstack flavor show $flavor_name
if [ "$?" != "0" ]
then
    flavor_name=ovn-migration-{{ resource_suffix }}
    openstack flavor create $flavor_name --ram $ram --disk $disk --vcpus 1
fi

[ "{{ osp_major_version }}" -ge "17" ] && key=id_extra_keys || key=id_rsa
openstack keypair create ovn-migration-{{ resource_suffix }} --public-key ~/.ssh/${key}.pub

openstack security group create ovn-migration-sg-{{ resource_suffix }}

openstack security group rule create --ingress --protocol icmp ovn-migration-sg-{{ resource_suffix }}
openstack security group rule create --ingress --protocol ipv6-icmp ovn-migration-sg-{{ resource_suffix }}

openstack security group rule create --ingress --protocol tcp --dst-port 22  ovn-migration-sg-{{ resource_suffix }}
openstack security group rule create --ingress --ethertype IPv6 --protocol tcp --dst-port 22:22 ovn-migration-sg-{{ resource_suffix }}

[ "{{ loadbalancer }}" == "True" ] && openstack security group rule create --ingress --protocol tcp --dst-port 80  ovn-migration-sg-{{ resource_suffix }}

if [[ "$resources_type" =~ "sriov_int" ]]
then
    vlan_id=$(openstack network create ovn-migration-net-{{ resource_suffix }} | awk -F'[ \t]*\\|[ \t]*' '/ provider:segmentation_id / {print $3}')
elif [[ "$resources_type" =~ "sriov_ext" ]]
then
    vlan_id=$(openstack network show {{ public_network_name }} | awk -F'[ \t]*\\|[ \t]*' '/ provider:segmentation_id / {print $3}')
elif [[ "$resources_type" =~ ^trunk ]]
then
    subport_vlan_id=1001
    openstack network create ovn-migration-net-{{ resource_suffix }}
else
    openstack network create ovn-migration-net-{{ resource_suffix }}
fi

if [[ "$resources_type" =~ "sriov" ]]
then
    bootproto="dhcp"
    persistent_dhclient="yes"
fi
if [[ "$resources_type" =~ "trunk" ]]
then
    subport_bootproto="none"
    subport_persistent_dhclient="no"
fi

openstack subnet create  --network ovn-migration-net-{{ resource_suffix }}  --subnet-range 192.168.168.0/24 ovn-migration-subnet-{{ resource_suffix }}
openstack subnet create  --network ovn-migration-net-{{ resource_suffix }}  --subnet-range 2001:db8:cafe:1::/64 ovn-migration-subnet-ipv6-{{ resource_suffix }} --ip-version 6  --ipv6-ra-mode slaac --ipv6-address-mode slaac

[ "$resources_type" == "dvr" ] && dvr_params="--distributed --no-ha"

openstack router create ovn-migration-router-{{ resource_suffix }} $dvr_params

openstack router set --external-gateway {{ public_network_name }} ovn-migration-router-{{ resource_suffix }}

openstack router add subnet ovn-migration-router-{{ resource_suffix }} ovn-migration-subnet-{{ resource_suffix }}
openstack router add subnet ovn-migration-router-{{ resource_suffix }} ovn-migration-subnet-ipv6-{{ resource_suffix }}

router_gw_ipv6_address=`openstack router show ovn-migration-router-{{ resource_suffix }} -c external_gateway_info -f json | jq '.external_gateway_info.external_fixed_ips[1].ip_address' | tr -d '"'`
sudo ip -6 route del 2001:db8:cafe:1::/64 || true
# TODO probably we should make this route persistent, i.e. to present even in case undercloud node has been rebooted for some reason (update?)
sudo ip -6 route add 2001:db8:cafe:1::/64 via $router_gw_ipv6_address

num_hypervisors=`openstack hypervisor list -f value | wc -l`

launch_normal_int_instances(){
    for i in $(seq 1 $num_hypervisors)
    do
        [ "$num_hypervisors" == "1" ] && index_suffix="" || index_suffix="-$i"
        openstack port create  --network ovn-migration-net-{{ resource_suffix }} --vnic-type normal ovn-migration-port-normal-int-{{ resource_suffix }}$index_suffix --security-group ovn-migration-sg-{{ resource_suffix }}

        openstack server create --flavor $flavor_name --image $image_name \
        --key-name ovn-migration-{{ resource_suffix }} \
        --nic port-id=ovn-migration-port-normal-int-{{ resource_suffix }}$index_suffix \
        --security-group ovn-migration-sg-{{ resource_suffix }} \
        ovn-migration-server-normal-int-{{ resource_suffix }}$index_suffix
    done
}

launch_normal_ext_instances(){
    for i in $(seq 1 $num_hypervisors)
    do
        [ "$num_hypervisors" == "1" ] && index_suffix="" || index_suffix="-$i"
        openstack port create  --network {{ public_network_name }} --vnic-type normal ovn-migration-port-normal-ext-{{ resource_suffix }}$index_suffix --security-group ovn-migration-sg-{{ resource_suffix }}

        openstack server create --flavor $flavor_name --image $image_name \
        --key-name ovn-migration-{{ resource_suffix }} \
        --nic port-id=ovn-migration-port-normal-ext-{{ resource_suffix }}$index_suffix \
        --security-group ovn-migration-sg-{{ resource_suffix }} \
        ovn-migration-server-normal-ext-{{ resource_suffix }}$index_suffix
    done
}

launch_sriov_vf_int_instances(){
    for i in $(seq 1 $num_hypervisors)
    do
        [ "$num_hypervisors" == "1" ] && index_suffix="" || index_suffix="-$i"
        openstack port create  --network ovn-migration-net-{{ resource_suffix }} --vnic-type direct ovn-migration-port-vf-int-{{ resource_suffix }}$index_suffix --security-group ovn-migration-sg-{{ resource_suffix }}

        openstack server create --flavor $flavor_name --image $image_name \
        --key-name ovn-migration-{{ resource_suffix }} \
        --nic port-id=ovn-migration-port-vf-int-{{ resource_suffix }}$index_suffix \
        --security-group ovn-migration-sg-{{ resource_suffix }} \
        ovn-migration-server-vf-int-{{ resource_suffix }}$index_suffix
    done
}

launch_sriov_vf_ext_instances(){
    for i in $(seq 1 $num_hypervisors)
    do
        [ "$num_hypervisors" == "1" ] && index_suffix="" || index_suffix="-$i"
        openstack port create  --network {{ public_network_name }} --vnic-type direct ovn-migration-port-vf-ext-{{ resource_suffix }}$index_suffix --security-group ovn-migration-sg-{{ resource_suffix }}

        openstack server create --flavor $flavor_name --image $image_name \
        --key-name ovn-migration-{{ resource_suffix }} \
        --nic port-id=ovn-migration-port-vf-ext-{{ resource_suffix }}$index_suffix \
        --security-group ovn-migration-sg-{{ resource_suffix }} \
        ovn-migration-server-vf-ext-{{ resource_suffix }}$index_suffix
    done
}

create_interface_template="#cloud-config
write_files:
  - path: /etc/sysconfig/network-scripts/ifcfg-eth0.$vlan_id
    owner: \"root\"
    permissions: \"777\"
    content: |
      DEVICE=eth0.$vlan_id
      BOOTPROTO=$bootproto
      ONBOOT=yes
      VLAN=yes
      PERSISTENT_DHCLIENT=$persistent_dhclient
runcmd:
  - [ sh, -c , \"systemctl restart NetworkManager\" ]
"
create_interface_template_trunk_subport="#cloud-config
write_files:
  - path: /etc/sysconfig/network-scripts/ifcfg-eth0.$subport_vlan_id
    owner: \"root\"
    permissions: \"777\"
    content: |
      DEVICE=eth0.$subport_vlan_id
      BOOTPROTO=$subport_bootproto
      ONBOOT=yes
      VLAN=yes
      PERSISTENT_DHCLIENT=$subport_persistent_dhclient
runcmd:
  - [ sh, -c , \"systemctl restart NetworkManager\" ]
"

launch_sriov_pf_int_instances(){
    /bin/cat <<EOM > create_interface.yaml
$create_interface_template
EOM
    for i in $(seq 1 $num_hypervisors)
    do
        [ "$num_hypervisors" == "1" ] && index_suffix="" || index_suffix="-$i"
        openstack port create  --network ovn-migration-net-{{ resource_suffix }} --vnic-type direct-physical ovn-migration-port-pf-int-{{ resource_suffix }}$index_suffix --security-group ovn-migration-sg-{{ resource_suffix }}
        openstack server create --flavor $flavor_name --image $image_name \
        --key-name ovn-migration-{{ resource_suffix }} \
        --nic port-id=ovn-migration-port-pf-int-{{ resource_suffix }}$index_suffix \
        --security-group ovn-migration-sg-{{ resource_suffix }} \
        ovn-migration-server-pf-int-{{ resource_suffix }}$index_suffix --config-drive True --user-data create_interface.yaml
    done
}

launch_sriov_pf_ext_instances(){
    /bin/cat <<EOM > create_interface.yaml
$create_interface_template
EOM
    for i in $(seq 1 $num_hypervisors)
    do
        [ "$num_hypervisors" == "1" ] && index_suffix="" || index_suffix="-$i"
        openstack port create  --network {{ public_network_name }} --vnic-type direct-physical ovn-migration-port-pf-ext-{{ resource_suffix }}$index_suffix --security-group ovn-migration-sg-{{ resource_suffix }}
        openstack server create --flavor $flavor_name --image $image_name \
        --key-name ovn-migration-{{ resource_suffix }} \
        --nic port-id=ovn-migration-port-pf-ext-{{ resource_suffix }}$index_suffix \
        --security-group ovn-migration-sg-{{ resource_suffix }} \
        ovn-migration-server-pf-ext-{{ resource_suffix }}$index_suffix --config-drive True --user-data create_interface.yaml
    done
}

declare -a TRUNK_VMS_FIPS
declare -a SUBPORT_IPS
launch_trunk_instances(){
    network=$1

    mtu_parent=$(openstack network show $network -c mtu -f value)
    network_type=$(openstack network create ovn-migration-net-vlan-{{ resource_suffix }} -f value -c 'provider:network_type')
    mtu_subport=$(openstack network show ovn-migration-net-vlan-{{ resource_suffix }} -c mtu -f value)
    [ "$mtu_parent" -lt "$mtu_subport" ] && openstack network set --mtu $mtu_parent  ovn-migration-net-vlan-{{ resource_suffix }}

    if [ "$network_type" == "vlan" ]
    then
        seg_id=$(openstack network show ovn-migration-net-vlan-{{ resource_suffix }} -f value -c 'provider:segmentation_id')
	segmentation="inherit"
    else
        segmentation="vlan,segmentation-id=$subport_vlan_id"
    fi
    openstack subnet create --network ovn-migration-net-vlan-{{ resource_suffix }} --subnet-range 192.168.200.0/24 subnet-vlan
    for i in $(seq 1 $num_hypervisors)
    do
        [ "$num_hypervisors" == "1" ] && index_suffix="" || index_suffix="-$i"
        [[ "$resources_type" =~ "ext" ]] && ext="-ext"
	parent_port=ovn-migration-port-trunk$ext-{{ resource_suffix }}$index_suffix
        openstack port create  --network $network  --vnic-type normal $parent_port --security-group ovn-migration-sg-{{ resource_suffix }}
        parent_mac="$( openstack port show $parent_port | awk '/ mac_address / { print $4 }' )"

        IP=$(openstack port create --network ovn-migration-net-vlan-{{ resource_suffix }} --mac-address "$parent_mac" ${parent_port}-subport -c fixed_ips -f value  | tr -d "[]{}:'" | tr "," "\n" | grep ip_addr | awk '{print $2}' )
        openstack network trunk create --parent-port $parent_port --subport port=${parent_port}-subport,segmentation-type=$segmentation ovn-migration-trunk-{{ resource_suffix }}${index_suffix}
	SUBPORT_IPS[$i]=$IP
	template_file=create_interface$index_suffix.yaml
        /bin/cat <<EOM > $template_file
$create_interface_template_trunk_subport
EOM
        sed -i "/^runcmd.*/i \ \ \ \ \ \ PREFIX=24" $template_file
        sed -i "/^runcmd.*/i \ \ \ \ \ \ IPADDR=$IP" $template_file
	if [ "$segmentation" == "inherit" ]; then
	    sed -i "s/\(.*eth0\.\).*/\1$seg_id/" $template_file
	fi

        openstack server create --flavor $flavor_name  --image $image_name \
        --key-name ovn-migration-{{ resource_suffix }} \
	--nic port-id=$parent_port ovn-migration-server-trunk$ext-{{ resource_suffix }}$index_suffix \
	--config-drive True --user-data create_interface$index_suffix.yaml
    done
}

if [ "$resources_type" == "normal" ]
then
    launch_normal_int_instances
    type_suffixes="normal-int"
fi

if [ "$resources_type" == "normal_ext" ]
then
    launch_normal_ext_instances
    type_suffixes="normal-ext"
fi

if [ "$resources_type" == "normal_ext_int" ]
then
    launch_normal_ext_instances
    launch_normal_int_instances
    type_suffixes="normal-ext normal-int"
fi

if [ "$resources_type" == "trunk" ]
then
    launch_trunk_instances ovn-migration-net-{{ resource_suffix }}
    type_suffixes="trunk"
fi

if [ "$resources_type" == "trunk_ext" ]
then
    launch_trunk_instances {{ public_network_name }}
    type_suffixes="trunk-ext"
fi

if [ "$resources_type" == "trunk_ext_with_normal_int" ]
then
    launch_normal_int_instances
    launch_trunk_instances {{ public_network_name }}
    type_suffixes="normal-int trunk-ext"
fi

if [ "$resources_type" == "sriov_int_vf" ]
then
    launch_sriov_vf_int_instances
    type_suffixes="vf-int"
fi

if [ "$resources_type" == "sriov_int_no_pf" ]
then
    launch_normal_int_instances
    launch_sriov_vf_int_instances
    type_suffixes="normal-int vf-int"
fi

if [ "$resources_type" == "sriov_int" ]
then
    launch_normal_int_instances
    launch_sriov_vf_int_instances
    launch_sriov_pf_int_instances
    type_suffixes="normal-int vf-int pf-int"
fi

if [ "$resources_type" == "sriov_ext_vf" ]
then
    launch_sriov_vf_ext_instances
    type_suffixes="vf-ext"
fi

if [ "$resources_type" == "sriov_ext_no_pf" ]
then
    launch_normal_ext_instances
    launch_sriov_vf_ext_instances
    type_suffixes="normal-ext vf-ext"
fi

if [ "$resources_type" == "sriov_ext_no_pf_with_trunk" ]
then
    launch_trunk_instances {{ public_network_name }}
    launch_sriov_vf_ext_instances
    type_suffixes="trunk-ext vf-ext"
fi

if [ "$resources_type" == "sriov_ext" ]
then
    launch_normal_ext_instances
    launch_sriov_vf_ext_instances
    launch_sriov_pf_ext_instances
    type_suffixes="normal-ext vf-ext pf-ext"
fi

if [ "$resources_type" == "sriov_ext_with_trunk" ]
then
    launch_trunk_instances {{ public_network_name }}
    launch_sriov_vf_ext_instances
    launch_sriov_pf_ext_instances
    type_suffixes="trunk-ext vf-ext pf-ext"
fi


for i in $(seq 1 $num_hypervisors)
do
    [ "$num_hypervisors" == "1" ] && index_suffix="" || index_suffix="-$i"

    for type_suffix in $type_suffixes
    do
        num_attempts=0
        while true
        do
            openstack server show ovn-migration-server-$type_suffix-{{ resource_suffix }}$index_suffix  -c status | grep ACTIVE
            if [ "$?" == "0" ]; then
                break
            fi
            sleep 5
            num_attempts=$((num_attempts+1))
            if [ $num_attempts -gt 24 ]
            then
                echo "VM is not up even after 2 minutes. Something is wrong"
                # printing server information for debugging purposes
                openstack server show ovn-migration-server-$type_suffix-{{ resource_suffix }}$index_suffix
                exit 1
            fi
        done

        vm_id=`openstack server show ovn-migration-server-$type_suffix-pinger$index_suffix -c id -f value`
        port_id=`openstack port list --device-id=$vm_id -c ID -f value`

        # Wait till the port is ACTIVE
        echo "Wait till the port is ACTIVE"
        port_status=`openstack port list --device-id=$vm_id -c Status -f value`

        num_attempts=0
        while [ "$port_status" != "ACTIVE" ]
        do
            num_attempts=$((num_attempts+1))
            sleep 5
            port_status=`openstack port list --device-id=$vm_id -c Status -f value`
            echo "Port status = $port_status"
            if [ $num_attempts -gt 24 ]
            then
                echo "Port is not up even after 2 minutes. Something is wrong"
                exit 1
            fi
        done

        echo "VM is up and the port is ACTIVE"

        if [[ "$type_suffix" =~ "ext" ]]; then
	        server_ip=`openstack port list | grep $type_suffix-{{ resource_suffix }}$index_suffix | grep -v subport | sed "s/.*ip_address='\([.0-9]*\).*/\1/"`
        else
            server_ip=`openstack floating ip create --port $port_id \
            {{ public_network_name }} -c floating_ip_address | grep floating_ip_address \
            | awk '{print $4'}`
	    # For now (temporary) we support ipv6 only for 'internal' workload types, i.e. behind a router
	    server_ipv6_address=`openstack port show ovn-migration-port-$type_suffix-{{ resource_suffix }}$index_suffix -c fixed_ips -f json | jq '.fixed_ips[1].ip_address' | tr -d '"'`
	fi

        echo $server_ip >> {{ ovn_migration_temp_dir }}/server_fips
	if [ ! -z "$server_ipv6_address" ]; then
	    echo $server_ipv6_address >> {{ ovn_migration_temp_dir }}/server_ipv6_addresses
	    server_ipv6_address=''
        fi
	if [[ "$type_suffix" =~ "trunk" ]]; then
	    TRUNK_VMS_FIPS[$i]=$server_ip
            echo $server_ip >> {{ ovn_migration_temp_dir }}/trunk_vms_fips
        fi

        # Wait till the VM allows ssh connections

        vm_status="down"
        num_attempts=0
        while [ "$vm_status" != "up" ]
        do
            num_attempts=$((num_attempts+1))
            sleep 5
            openstack console log show ovn-migration-server-$type_suffix-{{ resource_suffix }}$index_suffix | grep "login:"
            if [ "$?" == "0" ]
            then
                vm_status="up"
            else
                if [ $num_attempts -gt 60 ]
                then
                    echo "VM is not up with login prompt even after 5 minutes. Something is wrong."
                    # Even though something seems wrong, lets try and ping.
                    break
                fi
            fi
        done
    done
done

validate_vms_connectivity (){
    if [ "$1" == "ipv6" ]; then
        addresses_file=server_ipv6_addresses
	[ ! -s {{ ovn_migration_temp_dir }}/$addresses_file ] && return
	ping_ver=6
    else
	addresses_file=server_fips
    fi
    for server_ip in `cat {{ ovn_migration_temp_dir }}/$addresses_file`
    do
        num_attempts=0
        vm_reachable="false"
        while [ "$vm_reachable" != "true" ]
        do
            num_attempts=$((num_attempts+1))
            sleep 1
            ping$ping_ver -c 3 $server_ip
            if [ "$?" == "0" ]
            then
                vm_reachable="true"
            else
                if [ $num_attempts -gt 60 ]
                then
                    echo "VM is not responding from $server_ip. Something is wrong."
                    # printing server information for debugging purposes
                    server_id=$(openstack server list -f value | grep $server_ip | awk '{print $1}')
                    openstack console log show $server_id
                    exit 1
                fi
            fi
        done
        # TODO at this moment we skip testing ssh via ipv6 until it's stable
        if [ "$1" != "ipv6" ]; then
            timeout 20 ssh -i ~/.ssh/$key -o StrictHostKeyChecking=no \
            -o UserKnownHostsFile=/dev/null  $server_user_name@$server_ip date
            if [ $? -ne 0 ]; then
                echo "VM not accessible via ssh by $server_ip. Something went wrong."
                # printing server information for debugging purposes
                server_id=$(openstack server list -f value | grep $server_ip | awk '{print $1}')
                openstack console log show $server_id
                exit 1
            fi
        fi
    done
}
validate_vms_connectivity
validate_vms_connectivity ipv6

wait_until_is_active(){
    name=$1
    object=$2
    parent_object=$3
    num_attempts=0
    object_status="PENDING_CREATE"
    while true; do
        num_attempts=$((num_attempts+1))
        sleep 5
	status=$(openstack loadbalancer $object show $parent_object $name -c provisioning_status -f value)
        if [ "$status" == "ACTIVE" ]; then
	    break
	else
            [ $num_attempts -gt 24 ] && echo "$name is not active after 120 seconds. Something went wrong." && exit 1
        fi
    done
}

if [ "{{ loadbalancer }}" == "True" ]; then
    external_subnet=$(openstack subnet list --network {{ public_network_name }} --ip-version 4 -c ID -f value)
    openstack loadbalancer create --name ovn-migration-loadbalancer-{{ resource_suffix }} --vip-subnet-id $external_subnet
    wait_until_is_active ovn-migration-loadbalancer-{{ resource_suffix }}
    openstack loadbalancer listener create --name ovn-migration-listener-{{ resource_suffix }} --protocol HTTP --protocol-port 80 ovn-migration-loadbalancer-{{ resource_suffix }}
    wait_until_is_active ovn-migration-listener-{{ resource_suffix }} listener
    openstack loadbalancer pool create --name ovn-migration-pool-{{ resource_suffix }} --lb-algorithm ROUND_ROBIN --listener ovn-migration-listener-{{ resource_suffix }} --protocol HTTP
    wait_until_is_active ovn-migration-pool-{{ resource_suffix }} pool
    openstack loadbalancer healthmonitor create --name ovn-migration-healthmonitor-{{ resource_suffix }} --delay 5 --max-retries 4 --timeout 10 --type HTTP ovn-migration-pool-{{ resource_suffix }}
    wait_until_is_active ovn-migration-healthmonitor-{{ resource_suffix }} healthmonitor
    for i in $(seq 1 $num_hypervisors); do
        [ "$num_hypervisors" == "1" ] && index_suffix="" || index_suffix="-$i"
        for type_suffix in $type_suffixes; do
            vm_ip=$(openstack server show ovn-migration-server-$type_suffix-{{ resource_suffix }}$index_suffix -c addresses | grep addresses | grep -oE "\b([0-9]{1,3}\.){3}[0-9]{1,3}\b" | head -n 1)
            member_id=$(openstack loadbalancer member create --subnet-id ovn-migration-subnet-{{ resource_suffix }} --address $vm_ip --protocol-port 80 ovn-migration-pool-{{ resource_suffix }} -c id -f value)
	    wait_until_is_active $member_id member ovn-migration-pool-{{ resource_suffix }}
	done
    done

    for server_ip in `cat {{ ovn_migration_temp_dir }}/server_fips`; do
	timeout 20 ssh -i ~/.ssh/$key $server_user_name@$server_ip "while true ; do  echo -e \"HTTP/1.1 200 OK\\n\\n I am \$(hostname)\\n \$(date)\" | sudo nc -l -p 80  ;done &"
	sleep 3
        timeout 10 curl -q $server_ip | grep "I am ovn-migration-server"
        [ $? -ne 0 ] && echo "Server did not respond as expected. Something went wrong." && exit 1
    done
    vip_address=$(openstack loadbalancer show ovn-migration-loadbalancer-{{ resource_suffix }} -c vip_address -f value)
    sleep 10
    timeout 10 curl -q $vip_address | grep "I am ovn-migration-server"
    [ $? -ne 0 ] && echo "VIP did not respond as expected. Something went wrong." && exit 1
    echo $vip_address >> {{ ovn_migration_temp_dir }}/load_balancer_ips
fi

if [ "{{ fix_mtu }}" == "True" ]; then
    for server_ip in `cat {{ ovn_migration_temp_dir }}/server_fips`
    do
        current_mtu=$(ssh -i ~/.ssh/$key$server_user_name@$server_ip /sbin/ip -o link show eth0 | sed 's/.*mtu\ \(.*\)\ qdisc.*/\1/')
	target_mtu=$(( current_mtu - 8 ))
	timeout 20 ssh -i ~/.ssh/$key $server_user_name@$server_ip sudo /sbin/ip link set dev eth0 mtu $target_mtu
    done
fi

# For trunk workload we will run ping from each server to subports on other servers
if [[ "$resources_type" =~ "trunk" ]]; then
    for i in $(seq 1 $num_hypervisors); do
        for s in $(seq 1 $num_hypervisors); do
	    if [ $s -ne $i ]; then
                # First we check that short ping works
                timeout 20 ssh -i ~/.ssh/$key $server_user_name@${TRUNK_VMS_FIPS[$i]}  "ping ${SUBPORT_IPS[$s]} -c 3"
                if [ $? -ne 0 ]; then
                    echo "Trunk subport is not pingable. Something went wrong."
                    exit 1
                fi
                # If short ping worked we start an infinite ping
                ssh -i ~/.ssh/$key $server_user_name@${TRUNK_VMS_FIPS[$i]}  "ping ${SUBPORT_IPS[$s]} > ping_${SUBPORT_IPS[$s]}_output 2>&1 &"
            fi
        done
    done
fi

echo "Done with the resource creation : exiting"
exit 0
