#!/bin/bash
set -x

resources_type={{ resources_type }}
server_user_name={{ server_user_name }}
packet_loss_threshold={{ packet_loss_threshold }}
validations_type=$1

check_if_pinger_stopped(){
    [ "$2" == "quick" ] && wait_time=1 || wait_time=10
    size=$(stat --format=%s $file)
    [ $size -eq 0 ] && echo "FAIL: Log file is empty, something went wrong" && exit
    until grep 'packet loss' $file; do
        sleep 1
        wait_time=$((wait_time-1))
        [ $wait_time -eq 0 ] && echo "FAIL: Can't find ping result summary in the pinger log"  && exit
    done
}

validate(){
    packets_total=$( grep 'packet loss' $1 | cut -d' ' -f 1 )
    packets_received=$( grep 'packet loss' $1 | cut -d' ' -f 4 )
    ping_result=$(( packets_total - packets_received ))

    if [ $ping_result -gt $packet_loss_threshold ]; then
        echo "FAIL: $1: Ping loss higher than $packet_loss_threshold packets detected ($ping_result packets)"
        exit
    fi
    echo "$1: Passed validation"
}


if [ "$validations_type" == "ovn_migration_validations" ]; then
    echo TEST: test_workload_vms_ipv4_downtime
    file_list=`ls {{ ovn_migration_temp_dir }}/*ipv4_ping.out`
    [ "$file_list" == "" ] && echo "FAIL: No pinger log files found. Something went wrong." && exit

    for file in $file_list; do
        check_if_pinger_stopped $file
        validate $file
    done
    echo PASS: test_workload_vms_ipv4_downtime

    if ! ([ "$resources_type" == "normal_ext" ] || [ "$resources_type" == "trunk_ext" ] || [[ "$resources_type" =~ "sriov_ext" ]]); then
        echo TEST: test_workload_vms_ipv6_downtime
        file_list=`ls {{ ovn_migration_temp_dir }}/*ipv6_ping.out`
        [ "$file_list" == "" ] && echo "FAIL: No pinger log files found. Something went wrong." && exit

        for file in $file_list; do
            check_if_pinger_stopped $file
            validate $file
        done
        echo PASS: test_workload_vms_ipv6_downtime
    fi

    if [[ "$resources_type" =~ "trunk" ]]; then
        echo TEST: test_trunk_subports_downtime

        if [ "{{ shutdown_workload }}" == "True" ]; then
            for fip in `cat {{ ovn_migration_temp_dir }}/trunk_vms_fips`; do
                ips=$(timeout 10 ssh $server_user_name@$fip ls ping_*_output | sed 's/.*_\(.*\)_.*/\1/')
                for ip in $ips; do
                    timeout 10 ssh $server_user_name@$fip  "ping $ip > ping_${ip}_output 2>&1 &"
                done
            done
        sleep 60
        fi

        for fip in `cat {{ ovn_migration_temp_dir }}/trunk_vms_fips`; do
            timeout 10 ssh $server_user_name@$fip pkill --signal SIGINT ping
            sleep 2
            mkdir -p {{ ovn_migration_temp_dir }}/ping_output/$fip
            timeout 10 scp "$server_user_name@$fip:ping_*_output" {{ ovn_migration_temp_dir }}/ping_output/$fip
        done

        file_list=`find {{ ovn_migration_temp_dir }}/ping_output -type f`
        [ "$file_list" == "" ] && echo "FAIL: No pinger log files found. Something went wrong." && exit

        for file in $file_list; do
            check_if_pinger_stopped $file quick
            validate $file
        done
        echo PASS: test_trunk_subports_downtime
    fi
fi

if [ "$validations_type" == "ovn_migration_revert_validations" ]; then
    echo TEST: test_workload_vms_ipv4_connectivity
    [ ! -e {{ ovn_migration_temp_dir }}/server_fips ] && echo "FAIL: File with VM addresses not found. Something went wrong." && exit
    while read ip; do
        ping -c 3 $ip
        if [ $? -ne 0 ]; then
            echo "FAIL: No response from $ip" && exit
        fi
    done < "{{ ovn_migration_temp_dir }}/server_fips"
    echo PASS: test_workload_vms_ipv4_connectivity

    echo TEST: test_workload_vms_ipv6_connectivity
    [ ! -e {{ ovn_migration_temp_dir }}/server_ipv6_addresses ] && echo "FAIL: File with VM addresses not found. Something went wrong." && exit
    while read ip; do
        ping6 -c 3 $ip
        if [ $? -ne 0 ]; then
            echo "FAIL: No response from $ip" && exit
        fi
    done < "{{ ovn_migration_temp_dir }}/server_ipv6_addresses"
    echo PASS: test_workload_vms_ipv6_connectivity

    if [[ "$resources_type" =~ "trunk" ]]; then
        echo TEST: test_trunk_subports_connectivity
        [ ! -e {{ ovn_migration_temp_dir }}/trunk_vms_fips ] && echo "FAIL: File with VM addresses not found. Something went wrong." && exit
        for fip in `cat {{ ovn_migration_temp_dir }}/trunk_vms_fips`; do
            ips=$(timeout 10 ssh $server_user_name@$fip ls ping_*_output | sed 's/.*_\(.*\)_.*/\1/')
            for ip in $ips; do
                timeout 10 ssh $server_user_name@$fip ping -c 3 $ip
                if [ $? -ne 0 ]; then
                    echo "FAIL: Subport connectivity test failed."
                    exit
                fi
            done
        done
        echo PASS: test_trunk_subports_connectivity
    fi
fi
