#!/bin/bash
set -x

resources_type={{ resources_type }}
server_user_name={{ server_user_name }}
packet_loss_threshold={{ packet_loss_threshold }}
validations_type=$1
validate_ipv6={{ validate_ipv6 }}
validations_dir="{{ ovn_migration_working_dir }}/$validations_type"

[ "{{ osp_major_version }}" -ge "17" ] && key=id_extra_keys || key=id_rsa

check_if_pinger_stopped(){
    [ "$2" == "quick" ] && wait_time=1 || wait_time=10
    size=$(stat --format=%s $file)
    [ $size -eq 0 ] && echo "FAIL: Log file is empty, something went wrong" && exit
    until grep 'packet loss' $file; do
        sleep 1
        wait_time=$((wait_time-1))
        [ $wait_time -eq 0 ] && echo "FAIL: Can't find ping result summary in the pinger log"  && exit
    done
}

validate(){
    ping_result=$(python {{ ovn_migration_working_dir }}/get_longest_continuous_downtime.py $file | awk '{print $1}')
    # Reassigning ping_result just in order to get it in the log, for a reference
    ping_result=$(echo $ping_result | awk '{print $1}')
    if [ "$ping_result" == "" ]; then
        echo "FAIL: Unable to get ping result. Check ping logs"
        exit
    fi

    if [ $ping_result -gt $packet_loss_threshold ]; then
        echo "FAIL: $1: Continuous ping loss higher than $packet_loss_threshold packets detected ($ping_result packets)"
        exit
    fi
    echo "$1: Passed validation"
}

echo TEST: test_workload_vms_ipv4_downtime
file_list=`ls $validations_dir/*ipv4_ping.out`
[ "$file_list" == "" ] && echo "FAIL: No pinger log files found. Something went wrong." && exit

for file in $file_list; do
    check_if_pinger_stopped $file
    validate $file
done
echo PASS: test_workload_vms_ipv4_downtime

if ! ([[ "$resources_type" == "normal_ext" ]] || [ "$resources_type" == "trunk_ext" ] || [[ "$resources_type" =~ "sriov_ext" ]]) && [ "$validate_ipv6" == "True" ]; then
    echo TEST: test_workload_vms_ipv6_downtime
    file_list=`ls $validations_dir/*ipv6_ping.out`
    [ "$file_list" == "" ] && echo "FAIL: No pinger log files found. Something went wrong." && exit

    for file in $file_list; do
        check_if_pinger_stopped $file
        validate $file
    done
    echo PASS: test_workload_vms_ipv6_downtime
fi

if [[ "$resources_type" =~ "trunk" ]]; then
    echo TEST: test_trunk_subports_downtime

    if [ "{{ shutdown_workload }}" == "True" ]; then
        for fip in `cat {{ ovn_migration_working_dir }}/trunk_vms_fips`; do
            ips=$(timeout 10 ssh -i ~/.ssh/$key $server_user_name@$fip ls ping_*_output | sed 's/.*_\(.*\)_.*/\1/')
            for ip in $ips; do
                timeout 10 ssh -i ~/.ssh/$key $server_user_name@$fip  "ping $ip > ping_${ip}_output 2>&1 &"
            done
        done
    sleep 60
    fi

    for fip in `cat {{ ovn_migration_working_dir }}/trunk_vms_fips`; do
        timeout 10 ssh -i ~/.ssh/$key $server_user_name@$fip pkill --signal SIGINT ping
        sleep 2
        mkdir -p $validations_dir/ping_output/$fip
        timeout 10 scp -i ~/.ssh/$key "$server_user_name@$fip:ping_*_output" $validations_dir/ping_output/$fip
    done

    file_list=`find $validations_dir/ping_output -type f`
    [ "$file_list" == "" ] && echo "FAIL: No pinger log files found. Something went wrong." && exit

    for file in $file_list; do
        check_if_pinger_stopped $file quick
        validate $file
    done
    echo PASS: test_trunk_subports_downtime
fi
