#!/bin/bash

set -x

echo "creating virtual environment in /home/stack/.ovn_migration_pinger_venv"
python3 -m venv /home/stack/.ovn_migration_pinger_venv
source /home/stack/.ovn_migration_pinger_venv/bin/activate
pip install --upgrade pip
pip install sh
pip install netaddr

cat > {{ ovn_migration_temp_dir }}/pinger.py <<-EOF
import sh
import sys
import time
import netaddr


def main(ips):
    run_cmds = []
    for ip in ips:
        if netaddr.valid_ipv4(ip):
            ip_out_file = "/home/stack/ovn_migration/" + ip.replace('.', '_') + '_ipv4_ping.out'
            run_cmds.append(sh.ping('-i', '1', '-D', ip, _out=ip_out_file, _bg=True))
        if netaddr.valid_ipv6(ip):
            ip_out_file = "/home/stack/ovn_migration/" + ip.replace(':', '_') + '_ipv6_ping.out'
            run_cmds.append(sh.ping6('-i', '1', '-D', ip, _out=ip_out_file, _bg=True))

    if not run_cmds:
        return

    while True:
        try:
            cmd_file = open("{{ ovn_migration_temp_dir }}/_pinger_cmd.txt", "r")
            cmd = cmd_file.readline()
            if cmd.startswith("exit"):
                break
            cmd_file.close()
        except IOError:
            time.sleep(3)
            continue

    for p in run_cmds:
        p.signal(2)
        p.wait()


if __name__ == '__main__':
    main(sys.argv[1:])

EOF

cat > {{ ovn_migration_temp_dir }}/get_longest_continuous_downtime.py <<-EOF
import re
import sys
from itertools import groupby
from operator import itemgetter

def find_missing(lst):
    max = lst[0]
    for i in lst:
        if i > max:
             max = i

    min = lst[0]
    for i in lst:
        if i < min:
            min = i
    missing = max + 1
    list1 = []

    for _ in lst:
        max = max - 1
        if max not in lst:
          list1.append(max)

    return list1

def main(log_file):
    lines = []
    with open(log_file, 'r') as file:
        for line in file:
            if re.search("icmp_seq", line):
                lines.append(int(line.split()[5].split('=')[1]))
    data = sorted(find_missing(lines))

    longest = 0
    for k, g in groupby(enumerate(data), lambda ix : ix[0] - ix[1]):
        sequence = list(map(itemgetter(1), g))
        length = len(sequence)
        if length > longest:
            longest = length
    print("{} {}-{}".format(longest, sequence[0], sequence[-1]))

if __name__ == '__main__':
    main(sys.argv[1])
EOF

chmod +x {{ ovn_migration_temp_dir }}/get_longest_continuous_downtime.py

echo "Exiting..."
