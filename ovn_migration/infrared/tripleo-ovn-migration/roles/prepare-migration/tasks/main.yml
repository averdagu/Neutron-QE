- name: Copy overcloud deploy script to overcloud-deploy-ovn.sh
  block:
      - name: Check if overcloud_deploy.sh is present or not
        stat:
            path: ~/overcloud_deploy.sh
        register: deploy_file

      - name: Set the ml2ovs overcloud deploy script file name
        set_fact:
            overcloud_deploy_script: '~/overcloud_deploy.sh'
        when: deploy_file.stat.exists|bool

      - name: Check if overcloud-deploy.sh is present
        stat:
            path: ~/overcloud-deploy.sh
        register: deploy_file_2
        when: not deploy_file.stat.exists|bool

      - name: Set the ml2ovs overcloud deploy script file name
        set_fact:
            overcloud_deploy_script: '~/overcloud-deploy.sh'
        when:
            - not deploy_file.stat.exists|bool
            - deploy_file_2.stat.exists|bool

      - name: Check if overcloud_upgrade_prepare.sh is present
        stat:
            path: ~/overcloud_upgrade_prepare.sh
        register: upgrade_prepare_file
        when: is_after_ffu|bool

      - name: Set the ml2ovs overcloud deploy script file name
        set_fact:
            overcloud_deploy_script: '~/overcloud_upgrade_prepare.sh'
        when:
            - is_after_ffu|bool
            - upgrade_prepare_file.stat.exists|bool

      - name: Copy overcloud deploy script to overcloud-deploy-ovn.sh
        command: cp -f {{ overcloud_deploy_script }}  ~/overcloud-deploy-ovn.sh
        when: infrared_deployment|bool

- name: set overcloud deploy ovn script
  set_fact:
      overcloud_deploy_ovn_script: '~/overcloud-deploy-ovn.sh'

- name: Replace nfv-related ovs templates with corresponding ovn ones
  replace:
    path: "{{ overcloud_deploy_ovn_script }}"
    regexp: "{{ item.ovs }}"
    replace: "{{ item.ovn }}"
  loop:
    - {ovs: "neutron-ovs-dpdk.yaml", ovn: "neutron-ovn-dpdk.yaml"}
    - {ovs: "neutron-sriov.yaml", ovn: "neutron-ovn-sriov.yaml"}

- name: Remove remaining ml2ovs-specific environment files from overcloud deploy ovn script
  lineinfile:
      dest: "{{ overcloud_deploy_ovn_script }}"
      state: absent
      regexp: "{{ item }}"
  with_items:
      - "^.*openstack-tripleo-heat-templates.*ovs.*yaml"
      - "^.*floating_ip_port_forwarding.yaml"
  when: infrared_deployment|bool

- name: Set the neutron-ovn-dvr-ha.yaml file path if dvr
  set_fact:
      neutron_ovn_env_path: /usr/share/openstack-tripleo-heat-templates/environments/services/neutron-ovn-dvr-ha.yaml
  when: is_dvr|bool

- name: Set the neutron-ovn-ha.yaml file path if not dvr
  set_fact:
      neutron_ovn_env_path: /usr/share/openstack-tripleo-heat-templates/environments/services/neutron-ovn-ha.yaml
  when: not is_dvr|bool

- name: Set OVN extra configs file
  set_fact:
      ovn_extra_configs: '/home/stack/ovn-extra-configs.yaml'

- name: Construct overcloud-deploy-ovn.sh script for infrared deployments
  lineinfile:
      dest: "{{ overcloud_deploy_ovn_script }}"
      line: "{{ item }} \\"
      insertbefore: "^.*--log-file.*"
  with_items:
      - "-e {{ neutron_ovn_env_path }}"
      - "-e {{ ovn_extra_configs }}"
      - "-e /home/stack/ovn-extras.yaml"
  when:
      - infrared_deployment|bool
      - not is_sriov|bool
      - not is_after_ffu|bool

- name: Contruct overcloud-deploy-ovn.sh script for environments that are after FFU
  lineinfile:
      dest: "{{ overcloud_deploy_ovn_script }}"
      line: "{{ item }} \\"
      insertbefore: "^.*2>&1.*"
  with_items:
      - "-e {{ neutron_ovn_env_path }}"
      - "-e {{ ovn_extra_configs }}"
      - "-e /home/stack/ovn-extras.yaml"
  when:
      - infrared_deployment|bool
      - not is_sriov|bool
      - is_after_ffu|bool

- name: Construct overcloud-deploy-ovn.sh script for infrared deployments (SR-IOV)
  lineinfile:
      dest: "{{ overcloud_deploy_ovn_script }}"
      line: "{{ item }} \\"
      insertbefore: "^.*--log-file.*"
  with_items:
      - "-e /usr/share/openstack-tripleo-heat-templates/environments/services/neutron-ovn-ha.yaml"
      - "-e /usr/share/openstack-tripleo-heat-templates/environments/services/neutron-ovn-sriov.yaml"
      - "-e {{ ovn_extra_configs }}"
      - "-e /home/stack/ovn-extras.yaml"
  when:
      - infrared_deployment|bool
      - is_sriov|bool
      - not is_after_ffu|bool

- name: Construct overcloud-deploy-ovn.sh script for infrared deployments (SR-IOV after FFU)
  lineinfile:
      dest: "{{ overcloud_deploy_ovn_script }}"
      line: "{{ item }} \\"
      insertbefore: "^.*2>&1.*"
  with_items:
      - "-e /usr/share/openstack-tripleo-heat-templates/environments/services/neutron-ovn-ha.yaml"
      - "-e /usr/share/openstack-tripleo-heat-templates/environments/services/neutron-ovn-sriov.yaml"
      - "-e {{ ovn_extra_configs }}"
      - "-e /home/stack/ovn-extras.yaml"
  when:
      - infrared_deployment|bool
      - is_sriov|bool
      - is_after_ffu|bool

- name: Add disable-container-manage-clean-orphans environment file for batched migration
  lineinfile:
      dest: "{{ overcloud_deploy_ovn_script }}"
      line: "-e /usr/share/openstack-tripleo-heat-templates/environments/disable-container-manage-clean-orphans.yaml \\"
      insertbefore: "^.*ovn-extras.*"
  when: install.batched|bool

- name: Ensure openstack overcloud deploy command runs in /home/stack
  lineinfile:
      dest: "{{ overcloud_deploy_ovn_script }}"
      line: "cd /home/stack"
      insertbefore: "^.*openstack.*overcloud.*deploy.*"

- name: Set current bridge mappings into OVN extra configs file
  shell: |
      master_node=$(grep no_proxy {{ overcloudrc }} | tr ',' "\n" | grep "192.168\|ctlplane" | sed 's/.*=\(.*\)/\1/')
      current_mappings=$(ssh {{ overcloud_ssh_user }}@$master_node 'sudo podman exec -it neutron_api crudini --get /etc/neutron/plugins/ml2/openvswitch_agent.ini ovs bridge_mappings' | tr -d "\r" )
      echo "parameter_defaults:" > {{ ovn_extra_configs }}
      echo "  ComputeParameters:" >> {{ ovn_extra_configs }}
      echo "    NeutronBridgeMappings: \"$current_mappings\"" >> {{ ovn_extra_configs }}
  when: infrared_deployment|bool

- name: Set geneve into OVN extra configs file
  shell: |
      echo "  NeutronTypeDrivers: 'geneve,vlan,flat'" >> {{ ovn_extra_configs }}
      echo "  NeutronNetworkType: ['geneve', 'vlan', 'flat']" >> {{ ovn_extra_configs }}
      echo "  NeutronTunnelTypes: geneve" >> {{ ovn_extra_configs }}
  when:
      - infrared_deployment|bool
      - not is_sriov|bool
      - set_geneve|bool

- name: Add VLAN transparency
  shell: |
      echo "  EnableVLANTransparency: true" >> {{ ovn_extra_configs }}
  when:
      - infrared_deployment|bool
      - has_vlan_transparency|bool

- name: Add IGMP snooping
  shell: |
      echo "  NeutronEnableIgmpSnooping: true" >> {{ ovn_extra_configs }}
  when:
      - infrared_deployment|bool
      - has_igmp_snooping|bool

- name: Set Neutron DNS Domain
  shell: |
      echo "  NeutronDnsDomain: {{ neutron_dns_domain }}" >> {{ ovn_extra_configs }}
  when:
      - infrared_deployment|bool

- name: Add settings for Jumbo MTU
  shell: |
      echo "  OVNEmitNeedToFrag: True" >> {{ ovn_extra_configs }}
      echo "  ExtraConfig:" >> {{ ovn_extra_configs }}
      echo "    neutron::plugins::ml2::ovn::ovn_emit_need_to_frag: True" >> {{ ovn_extra_configs }}
  when:
      - infrared_deployment|bool
      - support_jumbo_mtu|bool

- name: Remove OVNCMSOptions for controller nodes in case we have networkers
  command: |
      sed -i '/ControllerParameters/,+1 d' "{{ neutron_ovn_env_path }}"
  become: yes
  when:
      - infrared_deployment|bool
      - has_networker|bool

- name: Enable networker chassis as gateway for composable deployments
  shell: |
      echo "  NetworkerParameters:" >> {{ ovn_extra_configs }}
      echo "    OVNCMSOptions: enable-chassis-as-gw" >> {{ ovn_extra_configs }}
  when:
      - infrared_deployment|bool
      - has_networker|bool

- name: Enable ControllerStorageNfs chassis as gateway for composable deployments
  shell: |
      echo "  ControllerStorageNfsParameters:" >> {{ ovn_extra_configs }}
      echo "    OVNCMSOptions: enable-chassis-as-gw" >> {{ ovn_extra_configs }}
  when:
      - infrared_deployment|bool
      - has_controller_nfs|bool

- name: Get roles data file for infrared SR-IOV deployments
  shell: |
      roles_file=$(grep '\-r\ ' /home/stack/overcloud-deploy-ovn.sh | sed 's/.*-r\ \(.*\)\ .*/\1/')
      [ "$roles_file" == "" ] && roles_file=$(grep '\-\-roles\-file\ ' /home/stack/overcloud-deploy-ovn.sh | sed 's/.*--roles-file\ \(.*\)\ .*/\1/')
      echo -n $roles_file
  register: shell_output
  when:
      - infrared_deployment|bool
      - is_sriov|bool

- name: Set roles data file for infrared SR-IOV deployments
  set_fact:
      roles_data_file: "{{ shell_output.stdout }}"
  when:
      - infrared_deployment|bool
      - is_sriov|bool

- name: Adjust roles data file for infrared SR-IOV deployments
  command: awk -i inplace '/OVNController/ {f=1; print; next} f && !/OVNMetadataAgent/ {print "    - OS::TripleO::Services::OVNMetadataAgent"} { f = 0; print }  ' {{ roles_data_file }}
  when:
      - infrared_deployment|bool
      - is_sriov|bool
      - not is_after_ffu|bool

- name: Adjust roles data file for infrared SR-IOV deployments arter FFU
  command: awk -i inplace '/OVNController/ {f=1; print; next} f && !/OVNMetadataAgent/ {print "  - OS::TripleO::Services::OVNMetadataAgent"} { f = 0; print }  ' {{ roles_data_file }}
  when:
      - infrared_deployment|bool
      - is_sriov|bool
      - is_after_ffu|bool

- name: Adjust overcloud-deploy-ovn.sh script for after_ffu environments
  command: sed -i  -e 's/upgrade\ prepare/deploy/' "{{ overcloud_deploy_ovn_script }}"
  when:
      - infrared_deployment|bool
      - is_after_ffu|bool

- name: Delete volume service if exist, temporary workaround
  shell: |
      source {{ overcloudrc }}
      for id in $(openstack service list -f value  | grep cinder | grep -w volume | cut -d ' ' -f 1); do
      openstack service delete $id
      done
  when:
      - infrared_deployment|bool
      - is_after_ffu|bool

- name: Construct overcloud-deploy-ovn.sh script for tripleo deployments
  template:
      src: templates/overcloud-deploy-ovn.sh.j2
      dest: ~/overcloud-deploy-ovn.sh
      mode: 0744
  when:
      - not infrared_deployment|bool

- name: "Change the neutron_driver in the containers-prepare-parameter.yaml file to ovn"
  lineinfile:
    path: ~/containers-prepare-parameter.yaml
    regexp: "      neutron_driver: ovs"
    line: "      neutron_driver: ovn"
    state: present

- name: Upload the ovn container images to the local registry
  shell: |
      source /home/stack/stackrc
      openstack tripleo container image prepare --environment-file /home/stack/containers-prepare-parameter.yaml
  become: yes
  changed_when: False
