#!/bin/bash
set -x

SSH_USER={{ overcloud_ssh_user }}

. ~/stackrc

if [ "{{ osp_major_version }}" -le "16" ]; then
  openstack server list --flavor controller -c Name -c Networks -f value | sed 's/ctlplane=//' > /tmp/nodes_data
  high_status='Master'
  low_status='Slave'
else
  metalsmith list | grep ctlplane | awk '{print $(NF-5),$(NF-1)}' | sed 's/ctlplane=//' | grep -v compute > /tmp/nodes_data
  high_status='Promoted'
  low_status='Unpromoted'
fi

. {{ overcloudrc }}

check_that_all_services_status(){
  for service in ${@:2}; do
    echo Service $service
    service_status=$(echo "$pcs_status" | grep $service | grep ocf |  awk '{print $(NF-1)}')
    for stat in $service_status; do
      echo Stat = $stat
      [ "$stat" != "$1" ] && echo "FAIL: Found a service that should be $1 but it does not" && exit
    done
    echo
  done
}

check_high_low_service(){
  for service in $@; do
    echo Service $service
    service_status=$(echo "$pcs_status" | grep $service | grep ocf |  awk '{print $(NF-1)}')
    [ "$service_status" == "" ] && continue
    high_count=0
    for stat in $service_status; do
      echo Stat = $stat
      if [ "$stat" != "$low_status" ] && [ "$stat" != "$high_status" ]; then
	      echo "FAIL: Service status is not '$high_status' or '$low_status'. Something went wrong"
	      exit
      fi
      [ "$stat" == "$high_status" ] && high_count=$(( high_count+1 ))
    done
    [ $high_count -ne 1 ] && echo "FAIL: It is expected that the service will have 1 $high_status. Found '$high_count'" && exit
    echo
  done
}

check_for_failed_resources(){
  status=$(echo "$pcs_status" | sed -ne '/Failed Resource/,$ p' | grep '*')
  echo Status = $status
  if [ "$status" != "" ]; then
    echo FAIL: Found failed resources && exit
  fi
}

echo TEST: test_pacemaker_services_status
while read -r node ip; do
  echo Node = $node
  pcs_status=$(timeout 10 ssh -n $SSH_USER@$ip sudo pcs status)
  check_that_all_services_status Started haproxy rabbitmq openstack-cinder-volume
  check_that_all_services_status $high_status galera
  check_high_low_service redis ovn-dbs
  check_for_failed_resources
done < /tmp/nodes_data
echo PASS
