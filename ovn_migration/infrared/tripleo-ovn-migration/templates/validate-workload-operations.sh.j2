#!/bin/bash
set -x

SSH_USER={{ overcloud_ssh_user }}

. /home/stack/stackrc

declare -A node_ips
if [ "{{ osp_major_version }}" -le "16" ]; then
  openstack server list -c Name -c Networks -f value | sed 's/ctlplane=//' | tee /tmp/nodes_data
else
  metalsmith list | grep ctlplane | awk '{print $(NF-5),$(NF-1)}' | sed 's/ctlplane=//' | tee /tmp/nodes_data
fi
while read -r node ip; do
    node_ips[$node]=$ip
done < /tmp/nodes_data

. {{ overcloudrc }}
server_user_name={{ server_user_name }}
ovn_migration_dir={{ ovn_migration_working_dir }}
validations_dir={{ validations_dir }}
resources_type={{ resources_type  }}
validate_ipv6={{ validate_ipv6 }}
ping_during_vm_migration={{ ping_during_vm_migration }}
ping_requests=3
debug_hint="See details in connectivity_summary_file and $(basename $0).log."
public_network={{ public_network }}

openstack server list --long -c ID -c Name -c Host -f value | grep 'migration.*pinger' > /tmp/workload_servers
servers_with_trunks=$(cat /tmp/workload_servers | grep 'migration.*pinger' | grep trunk | awk '{print $1}')
servers_no_trunks=$(cat /tmp/workload_servers | grep 'migration.*pinger' | grep -v trunk | awk '{print $1}')

trunk_servers_for_migration=$(echo $servers_with_trunks | awk '{print $1}')
trunk_servers_for_reboot=$(echo $servers_with_trunks | awk '{print $NF}')
# We use here opposite order in order to increase the chances to migrate VMs from different compute nodes
normal_servers_for_migration=$(echo $servers_no_trunks | awk '{print $NF}')
normal_servers_for_reboot=$(echo $servers_no_trunks | awk '{print $1}')

[ "{{ osp_major_version }}" -ge "17" ] && key=id_extra_keys || key=id_rsa

summary_file=$validations_dir/connectivity_summary_file
[ -e $summary_file ] && rm $summary_file
[ -e /tmp/ext_ips ] && rm /tmp/ext_ips

repeat(){
  local char=$1
  local t=$2
  for i in `seq 1 $t`; do echo -n "$1"; done
  echo
}

echo_title(){
  local t=$(echo -n $1 | wc -c)
  repeat "-" $(( t + 4 ))
  echo "| $1 |"
  repeat "-" $(( t + 4 ))
  date
}

get_ip(){
  port=$(openstack port list --device-id $1 --network $public_network -c ID -f value )
  if [ "$port" == "" ]; then
    port=$(openstack port list --device-id $1 --network ovn-migration-net-pinger  -c ID -f value)
    ip=$(openstack floating ip list --port $port -c 'Floating IP Address' -f value)
  else
    ip=$(openstack port show $port -c fixed_ips -f json | jq '.fixed_ips[0].ip_address' | tr -d '"' )
  fi
  echo $ip
}

for id in `cat /tmp/workload_servers | cut -d' ' -f1`; do
  get_ip $id >> /tmp/ext_ips
done
paste -d" " /tmp/workload_servers /tmp/ext_ips | tee /tmp/workload_servers_ips
outdir="$(mktemp -d)"

print_ips(){
  servers="$1"
  for server in $servers; do
    ip=$(grep $server /tmp/workload_servers_ips | awk '{print $4}')
    (print_int_ips $ip $outdir/$server) &
  done
  wait
  for server in $servers; do
    cat $outdir/$server >> $summary_file
  done
}

print_int_ips(){
  ext_ip=$1
  output_file=$2
  echo "$ip " >> $output_file
  ping -q -c $ping_requests $ext_ip > /dev/null
  [ $? -ne 0 ] && echo "$ext_ip is not responding. Can't access internal ip addresses" >> $output_file && echo >> $output_file && return
  timeout 10 ssh -n -i ~/.ssh/$key $server_user_name@$ext_ip "PATH=\$PATH:/sbin  ip -br addr | grep -v lo | sed 's/fe80.*//'" >> $output_file
  echo >> $output_file
}

echo Normal servers for migration >> $summary_file
print_ips "$normal_servers_for_migration"
echo Normal servers for reboot >> $summary_file
print_ips "$normal_servers_for_reboot"

echo Trunk servers for migration >> $summary_file
print_ips "$trunk_servers_for_migration"
echo Trunk servers for reboot >> $summary_file
print_ips "$trunk_servers_for_reboot"


if [ "$resources_type" == "granular_poc" ]; then
  mon_server_ips=""
  monitoring_servers=$(echo $servers_no_trunks | awk '{$1="";$NF="";print}' | awk '{$1=$1;print}')
  grep $(echo " $monitoring_servers" | sed 's/\ /\ -e\ /g') /tmp/workload_servers_ips | tee /tmp/monitoring_servers
fi

check_internal_network_ping(){
  local external_ip=$1
  local internal_ip=$2
  local output_file=$3
  timeout 10 ssh -n -i ~/.ssh/$key $server_user_name@$external_ip ping -W 1 -c $ping_requests $internal_ip >> $output_file
  if [ $? -ne 0 ]; then
    echo "INFO: ping $internal_ip via $external_ip = failed"  >> $output_file
    return 1
  else
    echo "INFO: ping $internal_ip via $external_ip = passed"  >> $output_file
  fi
}

run_selected_operation_on_internal_ips(){
  local operation=$1
  local int_ips="$2"
  local ext_ip=$3
  local res=0
  for ip in $ips; do
    case $operation in
      run_ping)
        check_internal_network_ping $ext_ip $ip $outdir/${ext_ip}_${ip}
        ;;
      get_ping_results)
        cat $outdir/${ext_ip}_${ip}
        grep INFO $outdir/${ext_ip}_${ip} >> $summary_file
        ;;
      check_ping_results)
        grep INFO.*failed $outdir/${ext_ip}_${ip}
        if [ $? -eq 0 ]; then
          echo "Connectivity issue with $ip detected"
          res=1
        elif ! [ -s $outdir/${ext_ip}_${ip} ]; then
          echo "Results file is empty. Looks like failed to establish a connection"
          res=1
        else
          echo Connectivity check of $ip passed
        fi
        ;;
      *)
        echo Operation not supported
        ;;
    esac
  done
  [ "$operation" == "get_ping_results" ] && echo >> $summary_file
  return $res
}

run_checks_on_internal_ips(){
  local ips="$1"
  local ext_ip=$2
  local res=0
  for operation in 'run_ping' 'get_ping_results' 'check_ping_results'; do
    run_selected_operation_on_internal_ips $operation "$ips" $ext_ip
    if [ $? -ne 0 ]; then
      res=1
    fi
  done
  return $res
}

run_granular_poc_internal_ports_checks(){
  local res=0
  if [ "$1" == "status_only" ]; then
    while read line; do
      ext_ip=$(echo $line | cut -d' ' -f 1)
      ips=$(echo $line | cut -d' ' -f 2- )
      run_checks_on_internal_ips "$ips" $ext_ip
    done < <(cat $ovn_migration_dir/zone*ips)
  else
    ext_ip=$(grep $server /tmp/workload_servers_ips | awk '{print $4}')
    ips=$(cat $ovn_migration_dir/zone*_ips | grep $ext_ip | cut -d' ' -f 2-)
    echo
    echo "IPS=$ips"
    echo
    run_checks_on_internal_ips "$ips" $ext_ip
    if [ $? -ne 0 ]; then
      res=1
    fi
  fi
  return $res
}

run_other_internal_ports_checks(){
  local res=0
  if [ "$1" == "status_only" ]; then
    ext_ips=$(cat $ovn_migration_dir/trunk_vms_fips)
  else
    ext_ips=$(grep $server /tmp/workload_servers_ips | awk '{print $4}')
    grep $ext_ips  $ovn_migration_dir/trunk_vms_fips
    if [ $? -ne 0 ]; then
      echo No internal ports that should be tested on this VM | tee -a >> $summary_file
      echo | tee -a >> $summary_file
      return 0
    fi
  fi
  for ext_ip in $ext_ips; do
    peer_ip=$(timeout 10 ssh -i ~/.ssh/$key $server_user_name@$ext_ip ls "ping*output | sed 's/ping_\(.*\)_output/\1/'")
    if [ "$peer_ip" == "" ]; then
      echo IP: $ext_ip. Failed to retrieve ip address of peer subport | tee -a $summary_file
      echo | tee -a $summary_file
      return 1
    fi
    ips=$peer_ip
    run_checks_on_internal_ips "$ips" $ext_ip
    if [ $? -ne 0 ]; then
      res=1
    fi
  done
  if [ "$1" == "status_only" ]; then
    res=0
  fi
  return $res
}

validate_internal_ports_connectivity(){
  echo Connectivity checks from internal network | tee -a $summary_file
  outdir="$(mktemp -d)"
  local res=0
  if [ "$resources_type" == "granular_poc" ]; then
    run_granular_poc_internal_ports_checks $1
    res=$?
  else
    if [ -s $ovn_migration_dir/trunk_vms_fips ]; then
      run_other_internal_ports_checks $1
      res=$?
    else
      [[ "$resources_type" =~ "trunk" ]] && echo FAIL: trunk_vms_fips file not found.  && return 1
    fi
  fi
  if [ $res -ne 0 ]; then
    if [ "$1" == "pre-check" ]; then
      echo "FAIL: server connectivity issues detected before the test. $debug_hint"
    elif [ "$1" == "post-check" ]; then
      echo "FAIL: server connectivity issues detected after the test. $debug_hint"
    else
      echo "WARN: connectivity issue on internal network detected. $debug_hint"
    fi
  fi
  echo
  return $res
}

check_external_network_ping(){
  local external_ip=$1
  local output_file=$2
  local ip_version=$3
  [ "$ip_version" == "ipv6" ] && ping_cmd=ping6 || ping_cmd=ping
  $ping_cmd -c $ping_requests $external_ip >> $output_file
  if [ $? -ne 0 ]; then
    echo "INFO: ping to $external_ip = failed"  >> $output_file
    return 1
  else
    echo "INFO: ping to $external_ip = passed"  >> $output_file
  fi

}

check_external_network_ssh(){
  local srv_ip=$1
  local output_file=$2
  local ip_version=$3
  [ "$ip_version" == "ipv6" ] && ipv6=-6
  echo Testing ssh to $srv_ip >> $output_file
  timeout 20 ssh $ipv6 -n -i ~/.ssh/$key -o StrictHostKeyChecking=no \
  -o UserKnownHostsFile=/dev/null  $server_user_name@$srv_ip date >> $output_file
  if [ $? -ne 0 ]; then
    echo "INFO: ssh to $srv_ip = failed"  >> $output_file
    return 1
  else
    echo "INFO: ssh to $srv_ip = passed"  >> $output_file
  fi
}


run_selected_operation_on_external_ips(){
  local $operation=$1
  local ips="$2"
  local ip_version=$3
  local res=0
  for ip in $ips; do
    echo
    echo IP = $ip
    echo operation=$operation
    echo
    case $operation in
      run_ping)
        (check_external_network_ping $ip $outdir/ping_${ip}_${ip_version} $ip_version) &
        ;;
      get_ping_results)
        cat $outdir/ping_${ip}_${ip_version}
        grep INFO $outdir/ping_${ip}_${ip_version} >> $summary_file
	echo
        ;;
      check_ping_results)
        grep INFO.*failed $outdir/ping_${ip}_${ip_version}
        if [ $? -eq 0 ]; then
          echo "Connectivity issue with $ip detected"
          res=1
        fi
        ;;
      run_ssh)
	(check_external_network_ssh $ip $outdir/ssh_${ip}_${ip_version} $ip_version) &
	;;
      get_ssh_results)
        cat $outdir/ssh_${ip}_${ip_version}
        grep INFO $outdir/ssh_${ip}_${ip_version} >> $summary_file
	echo
        ;;
      check_ssh_results)
        grep INFO.*failed $outdir/ssh_${ip}_${ip_version}
        if [ $? -eq 0 ]; then
          echo "SSH issue with $ip detected"
          res=1
        fi
        ;;
      *)
        echo Operation not supported
        ;;
    esac
  done
  if [ "$operation" == "run_ping" ] || [ "$operation" == "run_ssh" ]; then
    wait
  else
    return $res
  fi
}

run_checks_on_external_ips(){
  local ips="$1"
  local ip_version=$2
  local res=0
  for operation in 'run_ping' 'get_ping_results' 'check_ping_results' 'run_ssh' 'get_ssh_results' 'check_ssh_results'; do
    run_selected_operation_on_external_ips $operation "$ips" $ip_version
    if [ $? -ne 0 ]; then
      res=1
    fi
    ([ "$operation" == "get_ping_results" ] || [ "$operation" == "get_ssh_results" ]) && echo >> $summary_file
  done
  return $res
}

run_granular_poc_external_ports_checks(){
  local res=0
  if [ "$1" == "status_only" ]; then
    ips=$(cat $ovn_migration_dir/zone*_ips | awk '{print $1}')
    run_checks_on_external_ips "$ips" ipv4
    return 0
  else
    ips=$(grep $server /tmp/workload_servers_ips | awk '{print $4}')
    run_checks_on_external_ips "$ips" ipv4
    if [ $? -ne 0 ]; then
      res=1
    fi
    return $res
  fi
}

run_other_external_ports_checks(){
  local res=0
  if [ "$1" == "status_only" ]; then
    if [ "$2" == "ipv6" ]; then
      ip_version=ipv6
      ips=$(cat $ovn_migration_dir/server_ipv6_addresses)
    else
      ip_version=ipv4
      ips=$(cat $ovn_migration_dir/server_fips)
    fi
    run_checks_on_external_ips "$ips" $ip_version
    return 0
  else
    if [ "$2" == "ipv6" ]; then
      ip_version=ipv6
      ips=$(openstack port list --device-id $server --network ovn-migration-net-pinger -f json -c 'Fixed IP Addresses' | jq '.[0]["Fixed IP Addresses"][1].ip_address' --raw-output)
      if [ "$ips" == "null" ]; then
        echo Server does not have IPv6 address for testing
	return 0
      fi
    else
      ip_version=ipv4
      ips=$(grep $server /tmp/workload_servers_ips | awk '{print $4}')
    fi
    run_checks_on_external_ips "$ips" $ip_version
    if [ $? -ne 0 ]; then
      res=1
    fi
    return $res
  fi
}

validate_external_ports_connectivity(){
  outdir="$(mktemp -d)"
  local res=0
  echo Connectivity checks from external network | tee -a $summary_file
  if [ "$resources_type" == "granular_poc" ]; then
    run_granular_poc_external_ports_checks $1
    res=$?
    echo
  else
    if [ -s $ovn_migration_dir/server_fips ]; then
      run_other_external_ports_checks $1
      res=$?
    else
      echo FAIL: File with server fips does not exist && return 1
    fi
    if [ -s $ovn_migration_dir/server_ipv6_addresses ]; then
      if [ "$validate_ipv6" == "True" ]  ; then
        run_other_external_ports_checks $1 ipv6
        res=$?
      fi
    else
      if ! ([ "$resources_type" == "normal_ext" ] || [ "$resources_type" == "trunk_ext" ] || [[ "$resources_type" =~ "sriov_ext"  ]]); then
        echo FAIL: File with server ipv6 addresses does not exist && return 1
      fi
    fi
  fi

  if [ $res -ne 0 ]; then
    if [ "$1" == "pre-check" ]; then
      echo "FAIL: server connectivity issues detected before the test. $debug_hint"
    elif [ "$1" == "post-check" ]; then
      echo "FAIL: server connectivity issues detected after the test. $debug_hint"
    else
      echo "WARN: connectivity issue on external network detected. $debug_hint"
    fi
  fi
  echo
  return $res
}

check_nic(){
  nic_id=${port::8}
  echo NIC short ID = $nic_id
  for node in $(cat /tmp/nodes_data | awk '{print $1}'); do
    echo node = $node
    nics=$(timeout 10 ssh -i ~/.ssh/$key $SSH_USER@${node_ips[$node]} "PATH=\$PATH:/sbin ip -br addr | awk '{print \$1}'")
    [ "$nics" == "" ] && echo FAIL: Can not retrieve NICs from node $node && return 1
    for nic in $nics; do
        if [[ "$nic" =~ $nic_id ]]; then
	    [[ "$nic" =~ tap ]] && continue
            echo FAIL: OVS-specific NIC $nic related to vm $server found on $node
	    return 1
        fi
    done
  done
  echo
}

check_iptables(){
  id=${port::8}
  [ "$1" == "v6" ] && ver=6
  echo Short ID = $id
  for node in $(cat /tmp/nodes_data | awk '{print $1}'); do
    echo node = $node
    timeout 10 ssh -i ~/.ssh/$key $SSH_USER@${node_ips[$node]}  sudo ip${ver}tables -S | grep -q $id
    if [ $? -eq 0 ]; then
      echo "FAIL: There are stale ip${ver}tables rules related to id $id of vm $server on node $node"
      return 1
    fi
  done
  echo
}

validate_leftovers_cleanup(){
  echo Validating leftovers cleanup of server $server
  # TODO create leftovers check relevant for revert as well
  if ! [[ "{{ validations_type }}" =~ revert ]]; then
    ports=$(openstack port list --device-id $server -c ID -f value)
    for port in $ports; do
      echo port = $port
      (check_nic && check_iptables && check_iptables v6) || return 1
    done
  fi
}

start_vm_ext_downtime_check(){
  port=$(openstack port list --device-id $server --network $public_network -c ID -f value )
  ip=$(openstack port show $port -c fixed_ips -f json | jq '.fixed_ips[0].ip_address' | tr -d '"' )
  echo Starting pinger to $ip to monitor downtime
  pid=$(ping -q -s1 $ip >/tmp/$ip 2>&1 & echo $!)
}

stop_vm_ext_downtime_check(){
  echo Stopping pinger to $ip
  kill -3 $pid
  sleep 1
  echo Measured VM downtime from ext network during VM migration >> $summary_file
  cat /tmp/$ip >> $summary_file
  kill $pid
  sleep 1
}

start_vm_int_downtime_check(){
  int_ips=$(timeout 10 ssh -n -i ~/.ssh/$key $server_user_name@$ip "PATH=\$PATH:/sbin ip -br addr | grep -v lo | sed 's/fe80.*//'" | sed '1d' | awk '{print $3}' | cut -d'/' -f1)
  pids=""
  OUT="$(mktemp)"
  for int_ip in $int_ips; do
    suitable_mon_servers_by_int_ips=$(cat $ovn_migration_dir/zone*ips | grep $int_ip | cut -d' ' -f1 | sort)
    # We should select a server from other compute
    suitable_mon_servers_by_host=$(grep -v $host /tmp/monitoring_servers | awk '{print $4}' | sort)
    mon_server=$(comm -12 <(echo "$suitable_mon_servers_by_int_ips") <(echo "$suitable_mon_servers_by_host") | head -n 1)
    if [ "$mon_server" == "" ]; then
      echo "Can't find suitable monitoring server matching all criteria, i.e. ip and hosts, choosing only according to ip"
      mon_server=$(echo $suitable_mon_servers_by_int_ips | awk '{print $1}')
    fi
    echo Starting pinger to $int_ip via $mon_server to monitor internal network downtime
    p_id=$(timeout 10 ssh -n -i ~/.ssh/$key $server_user_name@$mon_server "ping -q -s1 $int_ip >/tmp/$int_ip 2>&1 & echo \$!")
    [ "$pids" == "" ] && pids="$p_id" || pids="$pids $p_id"
    echo "$int_ip $mon_server $p_id" >> $OUT
  done
}

stop_vm_int_downtime_check(){
  for int_ip in $int_ips; do
    mon_server=$(grep $int_ip $OUT | cut -d' ' -f 2)
    p_id=$(grep $int_ip $OUT | cut -d' ' -f 3)
    echo Getting stats from pinger to $int_ip via $mon_server
    timeout 10 ssh -n -i ~/.ssh/$key $server_user_name@$mon_server "kill -3 $p_id"
    sleep 1
    echo Measured VM downtime from int network, $int_ip via $mon_server, during VM migration >> $summary_file
    timeout 10 ssh -n -i ~/.ssh/$key $server_user_name@$mon_server "cat /tmp/$int_ip" >> $summary_file
    echo Stopping pinger with pid $p_id
    timeout 10 ssh -n -i ~/.ssh/$key $server_user_name@$mon_server "kill $p_id"
    sleep 1
  done
}

validate_vm_migration(){
  if [ "$1" == "live" ]; then
    test_name=$(echo ${FUNCNAME[1]} | sed 's/test_/test_live_/')
    extra_param="--live-migration --block-migration"
  else
    test_name=$(echo ${FUNCNAME[1]} | sed 's/test_/test_cold_/')
  fi
  if [ "$2" == "back" ]; then
    test_name="${test_name}_back"
  fi

  echo TEST: $test_name
  [ "$servers_for_migration" == "" ] && echo SKIPPED: No servers suitable for the test && return
  for server in $servers_for_migration; do
    echo server id = $server
    echo_title "Status of server $server connectivity before VM migration test" >> $summary_file
    validate_external_ports_connectivity pre-check || return
    validate_internal_ports_connectivity pre-check || return
    host=$(openstack server show $server -c OS-EXT-SRV-ATTR:host -f value)
    echo host = $host
    if [ "$resources_type" == "granular_poc" ] && [ "$ping_during_vm_migration" == "True" ] ; then
      echo >> $summary_file
      start_vm_ext_downtime_check
      start_vm_int_downtime_check
    fi
    echo execute vm migration command
    if [ "$2" == "back" ]; then
      dst_host=$(grep $server /tmp/workload_servers | awk '{print $3}')
      extra_param="$extra_param --host $dst_host"
    fi
    timeout 120 openstack server migrate $server $extra_param --wait
    host_new=$(openstack server show $server -c OS-EXT-SRV-ATTR:host -f value)
    echo new host = $host_new
    [ "$host" == "$host_new" ] && echo FAIL: Server $server failed to migrate && return
    [ "$2" == "back" ] && [ "$host_new" != "$dst_host" ] && echo FAIL: Server $server failed to migrate back to original host && return
    status=$(openstack server show $server -c status  -f value)
    if [ "$1" != "live" ]; then
      [ "$status" != "VERIFY_RESIZE" ] && echo FAIL: Server $server status is not VERIFY_RESIZE, actual status is $status  && return
      openstack server resize confirm $server
      status=$(openstack server show $server -c status  -f value)
    fi
    [ "$status" != "ACTIVE" ] && echo FAIL: Server $server status is not ACTIVE, actual status is $status && return
    echo Server migrated successfully from $host to $host_new
    if [ "$resources_type" == "granular_poc" ] && [ "$ping_during_vm_migration" == "True" ] ; then
      stop_vm_ext_downtime_check
      stop_vm_int_downtime_check
      echo >> $summary_file
    fi
    echo_title "Overall connectivity status after VM migration test" >> $summary_file
    validate_external_ports_connectivity status_only
    validate_internal_ports_connectivity status_only
    echo_title "Status of server $server connectivity after VM migration test" >> $summary_file
    validate_external_ports_connectivity post-check || return
    validate_internal_ports_connectivity post-check || return
    validate_leftovers_cleanup || return

  done
  echo PASS
}

echo_title "Overall connectivity status before all workload tests" >> $summary_file
validate_external_ports_connectivity status_only
validate_internal_ports_connectivity status_only

test_vm_migration(){
  servers_for_migration=$normal_servers_for_migration
  validate_vm_migration "$@"
}

test_migration_vm_with_trunk(){
  servers_for_migration=$trunk_servers_for_migration
  validate_vm_migration "$@"
}

if [ "{{ validate_vm_migration }}" == "True" ]; then
  if [ "{{ validate_vm_live_migration }}" == "True" ]; then
    test_vm_migration live
    test_migration_vm_with_trunk live
  fi

  if [ "{{ validate_vm_cold_migration }}" == "True" ]; then
    test_vm_migration
    test_migration_vm_with_trunk
  fi

  if [ "{{ validate_vm_migration_back }}" == "True" ]; then
    test_vm_migration live back
    test_migration_vm_with_trunk live back
  fi
fi

validate_vm_reboot(){
  echo TEST: ${FUNCNAME[1]}
  [ "$servers_for_reboot" == "" ] && echo SKIPPED: No servers suitable for the test && return
  for server in $servers_for_reboot; do
    echo server id = $server
    start_status=$(openstack server show -c status -f value $server)
    echo starting status = $start_status
    [ "$start_status" != "ACTIVE" ] && echo FAIL: Starting VM status is not ACTIVE. && return
    [ "$1" == "shelve" ] && reboot_scenario="shelve/unshelve" || reboot_scenario="stop/start"
    echo_title "Status of server $server connectivity before VM $reboot_scenario test" >> $summary_file
    validate_external_ports_connectivity pre-check || return
    validate_internal_ports_connectivity pre-check || return
    [ "$1" == "shelve" ] && stop_command="shelve" || stop_command="stop"
    echo "stopping server by '$stop_command' command"
    openstack server $stop_command $server
    [ "$1" == "shelve" ] && expected_interim_status="SHELVED_OFFLOADED" || expected_interim_status="SHUTOFF"
    for i in `seq 1 10`; do
      interim_status=$(openstack server show -c status -f value $server)
      [ "$interim_status" == "$expected_interim_status" ] && break
      [ $i -lt 10 ] && sleep 5
    done
    echo interim status = $interim_status
    [ "$interim_status" != "$expected_interim_status" ] && echo FAIL: Interim VM status is not $expected_interim_status. && return
    [ "$1" == "shelve" ] && start_command="unshelve" || start_command="start"
    echo "Starting server by '$start_command' command"
    openstack server $start_command $server

    # Wait till the VM allows ssh connections
    vm_status="down"
    num_attempts=0
    while [ "$vm_status" != "up" ]
    do
        num_attempts=$((num_attempts+1))
        sleep 5
        openstack console log show $server | grep "login:"
        if [ "$?" == "0" ]
        then
            vm_status="up"
        else
            if [ $num_attempts -gt 24 ]
            then
                echo "VM is not up with login prompt even after 2 minutes. Something went wrong"
                # Even though something seems wrong, lets try and continue with status and connectivity checks.
                break
            fi
        fi
    done

    final_status=$(openstack server show -c status -f value $server)
    echo final status = $final_status
    [ "$final_status" != "ACTIVE" ] && echo "FAIL: Final VM status is not ACTIVE." && return
    # TODO add waiting loop
    echo Wait 40 seconds before staring validations to make sure all is ready
    sleep 40
    echo_title "Overall connectivity status after VM $reboot_scenario test" >> $summary_file
    validate_external_ports_connectivity status_only
    validate_internal_ports_connectivity status_only
    echo_title "Status of server $server connectivity after VM $reboot_scenario test" >> $summary_file
    validate_external_ports_connectivity post-check || return
    validate_internal_ports_connectivity post-check || return
  done
  echo PASS
}

test_reboot_vm(){
  servers_for_reboot=$normal_servers_for_reboot
  validate_vm_reboot
}

test_reboot_vm_with_trunk(){
  servers_for_reboot=$trunk_servers_for_reboot
  validate_vm_reboot
}

test_shelve_vm(){
  servers_for_reboot=$normal_servers_for_reboot
  validate_vm_reboot shelve
}

test_shelve_vm_with_trunk(){
  servers_for_reboot=$trunk_servers_for_reboot
  validate_vm_reboot shelve
}

if [ "{{ validate_vm_reboot }}" == "True" ]; then
  test_reboot_vm
  test_reboot_vm_with_trunk
fi

if [ "{{ validate_vm_shelve }}" == "True" ]; then
  test_shelve_vm
  test_shelve_vm_with_trunk
fi

echo Finished validation of workload operations
