#!/bin/bash
set -x

SSH_USER={{ overcloud_ssh_user }}

. /home/stack/stackrc

declare -A node_ips
if [ "{{ osp_major_version }}" -le "16" ]; then
  openstack server list -c Name -c Networks -f value | sed 's/ctlplane=//' > /tmp/nodes_data
else
  metalsmith list | grep ctlplane | awk '{print $(NF-5),$(NF-1)}' | sed 's/ctlplane=//' > /tmp/nodes_data
fi
while read -r node ip; do
    node_ips[$node]=$ip
done < /tmp/nodes_data

. {{ overcloudrc }}
server_user_name={{ server_user_name }}
ovn_migration_dir={{ ovn_migration_working_dir }}

servers=$(openstack server list -c ID -c Name -f value | grep 'migration.*pinger' | awk '{print $1}')
# TODO(rsafrono) Maybe in case we have more than 2 workload servers (e.g. 4 when using 2 groups,
# i.e. trunk+normal or ext+int) we should pick 2 different servers for reboot and migration
servers_for_migration=$(echo $servers | awk '{print $1}')
servers_for_reboot=$(echo $servers | awk '{print $NF}')

validate_trunk_subports_connectivity(){
    ! [ -s $ovn_migration_dir/trunk_vms_fips ] && return
    for fip in `cat $ovn_migration_dir/trunk_vms_fips`; do
        ips=$(timeout 10 ssh $server_user_name@$fip ls ping_*_output | sed 's/.*_\(.*\)_.*/\1/')
        for ip in $ips; do
            timeout 10 ssh $server_user_name@$fip ping -c 3 $ip
            if [ $? -ne 0 ]; then
                echo "FAIL: Subport connectivity test failed."
                exit
            fi
        done
    done
}

validate_vms_connectivity(){
  ! [ -s $ovn_migration_dir/server_fips ] && echo FAIL: File with server fips does not exist && exit
  for server_ip in `cat $ovn_migration_dir/server_fips`; do
    echo Pinging $server_ip
    ping -c 3 $server_ip
    [ $? -ne 0 ] && echo FAIL: Server ip $server_ip is not responding. something went wrong && exit
    echo Ping test succeeded
    echo Testing ssh to $server_ip
    timeout 20 ssh -o StrictHostKeyChecking=no \
    -o UserKnownHostsFile=/dev/null  $server_user_name@$server_ip date
    if [ $? -ne 0 ]; then
        echo "FAIL: VM address $server_ip is not accessible via ssh. Something went wrong."
        exit
    fi
    echo SSH test succeeded
  done
  for server_ipv6 in `cat $ovn_migration_dir/server_ipv6_addresses`; do
    echo Pinging $server_ipv6
    ping6 -c 3 $server_ipv6
    [ $? -ne 0 ] && echo FAIL: Server ipv6 $server_ipv6 is not responding. something went wrong && exit
    echo Ping6 test succeeded
  done
}

check_nic(){
  nic_id=${port::8}
  echo NIC short ID = $nic_id
  for node in $(cat /tmp/nodes_data | awk '{print $1}'); do
    echo node = $node
    nics=$(timeout 10 ssh $SSH_USER@${node_ips[$node]} ip addr | grep -v '^\ ' | cut -d ' ' -f 2)
    [ "$nics" == "" ] && echo FAIL: Can not retrieve NICs from node $node && exit
    for nic in $nics; do
        if [[ "$nic" =~ $nic_id ]]; then
            echo FAIL: OVS-specific NIC $nic related to vm $server found on $node
	    exit
        fi
    done
  done
  echo
}

check_iptables(){
  id=${port::8}
  [ "$1" == "v6" ] && ver=6
  echo Short ID = $id
  for node in $(cat /tmp/nodes_data | awk '{print $1}'); do
    echo node = $node
    timeout 10 ssh $SSH_USER@${node_ips[$node]}  sudo ip${ver}tables -S | grep -q $id
    if [ $? -eq 0 ]; then
      echo "FAIL: There are stale ip${ver}tables rules related to id $id of vm $server on node $node"
      exit
    fi
  done
  echo
}

validate_leftovers_cleanup(){
  echo Validating leftovers cleanup of server $server
  ports=$(openstack port list --device-id $server -c ID -f value)
  for port in $ports; do
    echo port = $port
    check_nic
    check_iptables
    check_iptables v6
  done
}

validate_vm_migration(){
  if [ "$1" == "live" ]; then
    test_name='test_live_migrate_vm'
    extra_param="--live-migration --block-migration"
  else
    test_name='test_cold_migrate_vm'
  fi
  echo TEST: $test_name
  for server in $servers_for_migration; do
    echo server id = $server
    host=$(openstack server show $server -c OS-EXT-SRV-ATTR:host -f value)
    echo host = $host
    echo execute vm migration command
    timeout 120 openstack server migrate $server $extra_param --wait
    host_new=$(openstack server show $server -c OS-EXT-SRV-ATTR:host -f value)
    echo new host = $host_new
    [ "$host" == "$host_new" ] && echo FAIL: Server $server failed to migrate, something went wrong && exit
    status=$(openstack server show $server -c status  -f value)
    if [ "$1" != "live" ]; then
      [ "$status" != "VERIFY_RESIZE" ] && echo FAIL: Server $status is not VERIFY_RESIZE, something went wrong && exit
      openstack server resize confirm $server
      status=$(openstack server show $server -c status  -f value)
    fi
    [ "$status" != "ACTIVE" ] && echo FAIL: Server $status is not ACTIVE, something went wrong && exit
    echo Server migrated successfully from $host to $host_new
  done
  echo Wait 40 seconds to make sure all VMs are ready
  sleep 40
  validate_vms_connectivity
  validate_trunk_subports_connectivity
  validate_leftovers_cleanup
  echo PASS
}

if [ "{{ validate_vm_migration }}" == "True" ]; then
  validate_vm_migration
  validate_vm_migration live

else
  if [ "{{ validate_vm_live_migration }}" == "True" ]; then
    validate_vm_migration live
  fi

  if [ "{{ validate_vm_cold_migration }}" == "True" ]; then
    validate_vm_migration
  fi
fi

if [ "{{ validate_vm_reboot }}" == "True" ]; then
  echo TEST: test_reboot_vm
  for server in $servers_for_reboot; do
    echo server id = $server
    start_status=$(openstack server show -c status -f value $server)
    echo starting status = $start_status
    [ "$start_status" != "ACTIVE" ] && echo FAIL: Starting VM status is not ACTIVE. Something went wrong && exit
    echo execute server stop command
    openstack server stop $server
    interim_status=$(openstack server show -c status -f value $server)
    echo interim status = $interim_status
    [ "$interim_status" != "SHUTOFF" ] && echo FAIL: Interim VM status is not SHUTOFF. Something went wrong && exit
    echo execute server start command
    openstack server start $server

    # Wait till the VM allows ssh connections
    vm_status="down"
    num_attempts=0
    while [ "$vm_status" != "up" ]
    do
        num_attempts=$((num_attempts+1))
        sleep 5
        openstack console log show $server | grep "login:"
        if [ "$?" == "0" ]
        then
            vm_status="up"
        else
            if [ $num_attempts -gt 24 ]
            then
                echo "VM is not up with login prompt even after 2 minutes. Something is wrong."
                # Even though something seems wrong, lets try and continue with status and connectivity checks.
                break
            fi
        fi
    done

    final_status=$(openstack server show -c status -f value $server)
    echo final status = $final_status
    [ "$final_status" != "ACTIVE" ] && echo "FAIL: Final VM status is not ACTIVE. Something went wrong" && exit
  done
  echo Wait 40 seconds to make sure all VMs are ready
  sleep 40
  validate_vms_connectivity
  validate_trunk_subports_connectivity
  validate_leftovers_cleanup
  echo PASS
fi
