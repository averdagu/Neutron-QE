# Playbook which preps migration and then invokes the migration script.

- name: Set necessary facts
  hosts: undercloud
  tasks:
      - name: Set necessary facts (infrared deployment)
        set_fact:
            migrate: "{{ install.migrate }}"
            stack_name: "{{ install.stack_name }}"
            overcloud_ssh_user: "{{ install.overcloud_ssh_user }}"
            reduce_mtu: "{{ install.reduce_mtu }}"
            create_validation_workload: "{{ install.create_validation_workload }}"
            export_image: "{{ install.export_image }}"
            image_to_boot: "{{ install.image_name }}"
            flavor_to_use: "{{ install.flavor_name }}"
            server_user_name: "{{ install.server_user_name }}"
            resources_type: "{{ install.resources_type }}"
            public_network: "{{ install.external_network }}"
            packet_loss_threshold: "{{ install.allowed_packet_loss }}"
            validate_ipv6: "{{ install.validate_ipv6 }}"
            validate_agents: "{{ install.validate_agents }}"
            validate_nodes: "{{ install.validate_nodes }}"
            validate_pcs_status: "{{ install.validate_pcs_status }}"
            validate_vm_cold_migration: "{{ install.validate_vm_cold_migration }}"
            validate_vm_live_migration: "{{ install.validate_vm_live_migration }}"
            validate_vm_migration: "{{ install.validate_vm_migration }}"
            validate_vm_migration_back: "{{ install.validate_vm_migration_back }}"
            validate_vm_reboot: "{{ install.validate_vm_reboot }}"
            validate_vm_shelve: "{{ install.validate_vm_shelve }}"
            ping_during_vm_migration: "{{ install.ping_during_vm_migration }}"
            fetch_junit_xml: "{{ install.fetch_junit_xml }}"
        when: install is defined

      - name: Set necessary facts (Tripleo deployment)
        set_fact:
            migrate: "{{ migrate }}"
            stack_name: "{{ stack_name }}"
            overcloud_ssh_user: "{{ overcloud_ssh_user }}"
            reduce_mtu: "{{ reduce_mtu }}"
            create_validation_workload: "{{ create_validation_workload }}"
            export_image: "{{ export_image }}"
            image_to_boot: "{{ image_name }}"
            flavor_to_use: "{{ flavor_name }}"
            server_user_name: "{{ server_user_name }}"
            resources_type: "{{ resources_type }}"
            public_network: "{{ external_network }}"
            packet_loss_threshold: "{{ allowed_packet_loss }}"
            validate_ipv6: "{{ validate_ipv6 }}"
            validate_agents: "{{ validate_agents }}"
            validate_nodes: "{{ validate_nodes }}"
            validate_pcs_status: "{{ validate_pcs_status }}"
            validate_vm_cold_migration: "{{ validate_vm_cold_migration }}"
            validate_vm_live_migration: "{{ validate_vm_live_migration }}"
            validate_vm_migration: "{{ validate_vm_migration }}"
            validate_vm_migration_back: "{{ validate_vm_migration_back }}"
            validate_vm_reboot: "{{ validate_vm_reboot }}"
            validate_vm_shelve: "{{ validate_vm_shelve }}"
            ping_during_vm_migration: "{{ ping_during_vm_migration }}"
            fetch_junit_xml: "{{ fetch_junit_xml }}"
        when: install is not defined

      - name: Set ovn migration working dir
        set_fact:
            ovn_migration_working_dir: /home/stack/ovn_migration

      - name: Set overcloudrc
        set_fact:
            overcloudrc: "/home/stack/{{ stack_name }}rc"

      - name: Get rhel repo file
        shell: |
            basename `ls -1 /etc/yum.repos.d/*rhel* | sort -r | head -1 `
        register: rhel_repo_file

      - name: Set rhel repo file name
        set_fact:
            rhel_repo_file_name: "{{ rhel_repo_file.stdout }}"
            cacheable: yes

- name: Set repos on controllers in order to be able to deploy extra tools
  hosts: controller
  tasks:
      - name: Set rhel repo on controllers
        shell: |
            repo_file={{ hostvars['undercloud-0']['ansible_facts']['rhel_repo_file_name'] }}
            sshpass -p 'stack' timeout 10 scp -o StrictHostKeyChecking=no stack@{{ install.backup_migration_ip }}:/etc/yum.repos.d/$repo_file /tmp
            if [ ! -s /etc/yum.repos.d/$repo_file ]; then
            sudo cp /tmp/$repo_file /etc/yum.repos.d/
            fi

- name: Install migration tool
  hosts: undercloud
  become: true
  vars:
    python_major_version: "{{ ansible_facts.python_version.split('.')[0] }}"
  tasks:
      - name: Install python 2 virtualenv and networking ovn migration tool
        yum:
            name:
              - python-virtualenv
              - python-networking-ovn-migration-tool
              - bc
            state: present
        when: python_major_version | int == 2

      - name: Install python 3 networking ovn migration tool
        yum:
            name:
              - python3-networking-ovn-migration-tool
              - bc
            state: present
        when: python_major_version | int == 3

      - name: Set host_key_checking to False in ansible.cfg
        ini_file:
            path=/etc/ansible/ansible.cfg
            section=defaults
            option=host_key_checking
            value=False
        ignore_errors: yes

      - name: Get openstack version from puddle
        shell: |
            sed 's/RHOS-\(.*\)-RHEL.*/\1/g' /home/stack/core_puddle_version
        register: puddle_version_output

      - set_fact:
            osp_major_version: "{{ puddle_version_output.stdout.split('.')[0] }}"
            cacheable: yes

      - set_fact:
            playbooks_path: '/usr/share/ansible/networking-ovn-migration/playbooks'
        when: osp_major_version | int < 17

      - set_fact:
            playbooks_path: '/usr/share/ansible/neutron-ovn-migration/playbooks'
        when: osp_major_version | int >= 17

      - set_fact:
            backup_and_restore_path: '/usr/share/ansible/roles/backup-and-restore'
        when: osp_major_version | int < 17

      - set_fact:
            backup_and_restore_path: '/usr/share/ansible/roles/backup_and_restore'
        when: osp_major_version | int >= 17

      - set_fact:
            workload_script: "{{ playbooks_path }}/roles/resources/create/templates/create-resources.sh.j2"

      - name: Check if code supports batched migration
        shell: |
            grep -q activate-ovn /usr/bin/ovn_migration.sh
            [ "$?" -eq "0" ] && echo True || echo False
        register: check_output

      - set_fact:
            batched_migration_support: "{{ check_output.stdout }}"

      - name: Apply workarounds
        block:
            - name: Apply workaround for flavor size
              shell: |
                  sed -i 's/\(\-\-disk\ 1\)\ /\10/g' {{ workload_script }}
              when: install.patch_flavor_size|bool

            - name: Inject code to print workload VM console
              shell: |
                  sed -i "/exit\ 1/i server_id=\$(openstack server list -f value | grep \$server_ip | awk '{print \$1}')\nopenstack console log show \$server_id" {{ playbooks_path }}/roles/resources/create/templates/create-resources.sh.j2
              when:
                  - install.print_vm_console_on_fail|bool
                  - osp_major_version | int < 17

            - name: Disable pre-checks
              shell: |
                  sed -i '/Pre\ migration\ checks/,+6 d' {{ playbooks_path }}/ovn-migration.yml
              when: install.disable_pre_checks

            - name: Decrease user input timeout for backup and restore
              shell: |
                  sed -i '/BACKUP_PROG_COMPRESS_SUFFIX/a\ \ USER_INPUT_TIMEOUT: 5' {{ backup_and_restore_path }}/defaults/main.yml
                  sed -i '/USER_INPUT_TIMEOUT/a\ \ ISO_RECOVER_MODE: unattended' {{ backup_and_restore_path }}/defaults/main.yml
                  if [ "{{ osp_major_version | int }}" == "17" ]; then
                  sed -i '/USER_INPUT_TIMEOUT/a\ \ KERNEL_CMDLINE: unattended' {{ backup_and_restore_path }}/defaults/main.yml
                  fi
              when: install.create_backup|bool

            - name: Temporary workaround for backup issue bz2101765 on OSP17
              shell: |
                  sed  -i "s/.*desync_output.stderr.*/  until: desync_output.stderr == \"\" or '\"WARN\" in desync_output.stderr'/" /usr/share/ansible/roles/backup_and_restore/tasks/db_backup.yml
              when: osp_major_version | int >= 17

            - name: Temporary workaround for backup issue caused by bz2149586
              shell: |
                  sed -i "/Take this node out of pacemaker/i - name: Inject poolmetadatasize fix\n  shell: |\n      sed -i 's/\\\(--type\ thin-pool\\\)/--poolmetadatasize 8M \\\1/' /usr/share/rear/layout/prepare/GNU/Linux/110_include_lvm_code.sh\n  tags:\n    - bar_create_recover_image\n" {{ backup_and_restore_path }}/tasks/run_backup.yml
              when:
                  - osp_major_version | int >= 17
                  - install.create_backup|bool
                  - install.fix_poolmetadatasize|bool

            - name: Temporary workaround for inventory issue
              shell: |
                  sed -i "/backup()/a \ \ \ \ local inventory_file=\"\$OOO_WORKDIR/\$STACK_NAME/config-download/\$STACK_NAME/tripleo-ansible-inventory.yaml\"" /usr/bin/ovn_migration.sh
              when:
                  - osp_major_version | int >= 17
                  - install.create_backup|bool
                  - install.fix_inventory_for_backup|bool

            - name: Apply temporary fix for notify-nova
              shell: |
                  sed -i "s/stdout')/stdout_lines') | flatten/" /usr/share/ansible/neutron-ovn-migration/playbooks/tasks/notify-nova.yml
              when: install.fix_notify_nova|bool
        when: migrate|bool

- name: Install monitoring tool
  hosts: openstack_nodes
  become: true
  tasks:
      - name: Install collectd
        block:
            - name: Install packages
              yum:
                  name:
                    - collectd
                    - collectd-ping
                  state: present

            - name: Create collectd ping plugin configuration
              shell: |
                  [ -f /tmp/collectd_ping.conf ] && sudo rm -rf /tmp/collectd_ping.conf
                  echo "LoadPlugin ping" >> /tmp/collectd_ping.conf
                  hosts1=$(grep 'internalapi\|storage\|tenant' /etc/hosts | grep -v overcloud | awk '{print $3}' | sort | uniq)
                  hosts2=$(grep overcloud /etc/hosts | grep -v "\#" | awk '{print $2}' | sort | uniq)
                  echo "<Plugin ping>" >> /tmp/collectd_ping.conf
                  for host in $hosts1 $hosts2; do
                    echo "  Host \"$host\"" >> /tmp/collectd_ping.conf
                  done
                  echo "</Plugin>" >> /tmp/collectd_ping.conf

            - name: Create collectd csv plugin configuration
              shell: |
                  [ -f /tmp/collectd_csv.conf ] && sudo rm -rf /tmp/collectd_csv.conf
                  echo "LoadPlugin csv" >> /tmp/collectd_csv.conf
                  echo "<Plugin csv>" >> /tmp/collectd_csv.conf
                  echo "  DataDir \"/var/lib/collectd/csv\"" >> /tmp/collectd_csv.conf
                  echo "  StoreRates false" >> /tmp/collectd_csv.conf
                  echo "</Plugin>" >> /tmp/collectd_csv.conf

            - name: Install collectd ping configuration on nodes
              shell: |
                  sshpass -p 'stack' timeout 10 scp -o StrictHostKeyChecking=no stack@{{ install.backup_migration_ip }}:/tmp/collectd_ping.conf /tmp
                  sudo cp /tmp/collectd_ping.conf /etc/collectd.d/

            - name: Install collectd csv configuration on nodes
              shell: |
                  sshpass -p 'stack' timeout 10 scp -o StrictHostKeyChecking=no stack@{{ install.backup_migration_ip }}:/tmp/collectd_csv.conf /tmp
                  sudo cp /tmp/collectd_csv.conf /etc/collectd.d/

            - name: Set collectd interval
              shell: |
                  sudo sed -i "/^Include/i Interval 1" /etc/collectd.conf

            - name: Enable service collectd
              service:
                  name: collectd
                  enabled: yes

            - name: Start service collectd
              service:
                  name: collectd
                  state: restarted

        when: install.run_collectd|bool

- name: Prepare for migration
  hosts: undercloud
  tasks:
      - name: Delete temp file directory if present
        file:
            state: absent
            path: "{{ ovn_migration_working_dir }}"
        when: migrate|bool

      - name : Create temp file directory if not present
        file:
            state: directory
            path: "{{ ovn_migration_working_dir }}"
        when: migrate|bool

      - name: Set validations type, ovn migration
        set_fact:
            validations_type: "ovn_migration_validations"
        when: migrate|bool

      - name: Set validations type, revert to ovs
        set_fact:
            validations_type: "ovn_migration_revert_validations"
        when: install.revert_to_ovs|bool

      - name: Set validations directory, ovn migration
        set_fact:
            validations_dir: "{{ ovn_migration_working_dir }}/{{ validations_type }}"

      - name : Create validation directory if not present
        file:
            state: directory
            path: "{{ validations_dir }}"

      - name : Create dumps directory if not present
        file:
            state: directory
            path: "{{ ovn_migration_working_dir }}/dumps"
        when:
            - migrate|bool
            - install.dump_objects|bool

      - name: Set necessary facts (infrared deployment)
        set_fact:
            is_dvr: "{{ install.dvr }}"
            is_sriov: "{{ install.sriov }}"
            is_after_ffu: "{{ install.after_ffu }}"
            support_jumbo_mtu: "{{ install.jumbo_mtu }}"
            has_networker: "{{ install.networker }}"
            has_controller_nfs: "{{ install.controller_nfs }}"
            has_vlan_transparency: "{{ install.vlan_transparency }}"
            has_igmp_snooping: "{{ install.igmp_snooping }}"
            neutron_dns_domain: "{{ install.neutron_dns_domain }}"
            set_geneve: "{{ install.geneve }}"
        when: install is defined

      - name: Set necessary facts (Tripleo deployment)
        set_fact:
            is_dvr: "{{ dvr }}"
            is_sriov: "{{ sriov }}"
            is_after_ffu: "{{ after_ffu }}"
            support_jumbo_mtu: "{{ jumbo_mtu }}"
            has_networker: "{{ networker }}"
            has_controller_nfs: "{{ controller_nfs }}"
            has_vlan_transparency: "{{ vlan_transparency }}"
            has_igmp_snooping: "{{ igmp_snooping }}"
            neutron_dns_domain: "{{ neutron_dns_domain }}"
            set_geneve: "{{ geneve }}"
        when: install is not defined

      - name: Fail if sriov and dvr specified together
        fail:
            msg: "Invalid arguments: --sriov True and --dvr True can not be used together"
        when:
            - is_sriov|bool and is_dvr|bool

      - name: Set the image registry information
        block:
            - name: Get the image registry info (infrared deployment)
              block:
                  - name: Set is_infrared deployment
                    set_fact:
                        is_infrared: True

              when:
                  - install is defined

            - name: Get the image registry info (tripleo deployment)
              block:
                  - name: Set is_infrared deployment
                    set_fact:
                        is_infrared: False

              when:
                  - install is not defined

      - name: Prepare for migration
        include_role:
           name: prepare-migration
        vars:
           infrared_deployment: "{{ is_infrared }}"
        when: migrate|bool

- name: Boot few VMs to measure downtime
  hosts: undercloud
  tasks:
      - name: Check if need to create resources
        block:
            - name: Set create_vms (infrared)
              set_fact:
                  create_vms: "{{ install.create_resources }}"
              when:
                - install is defined

            - name: Set create_vms (tripleo deployment)
              set_fact:
                  create_vms: "{{ create_resources }}"
              when:
                - install is not defined

      - name: Set facts for resources creation (infrared deployment)
        set_fact:
            public_net: "{{ install.external_network }}"
            fix_mtu: "{{ install.fix_workload_mtu }}"
            loadbalancer: "{{ install.create_loadbalancer }}"
            shutdown_workload: "{{ install.shutdown_workload }}"
        when: install is defined

      - name: Set facts for resources creation (Tripleo deployment)
        set_fact:
            public_net: "{{ external_network }}"
            fix_mtu: "{{ fix_workload_mtu }}"
            loadbalancer: "{{ create_loadbalancer }}"
            shutdown_workload: "{{ shutdown_workload }}"
        when: install is not defined

      - name: Create few resources
        block:
          - name: Fail if resources_type is dvr while environment is SR-IOV
            fail:
                msg: "SR-IOV does not support dvr resources"
            when:
                - resources_type == 'dvr' and is_sriov|bool

          - name: Fail if resources_type is dvr while target environment is not DVR
            fail:
                msg: "DVR resources can be run only on DVR environment"
            when:
                - resources_type == 'dvr' and not is_dvr|bool

          - name: Fail if resources_type is sriov* while environment is not SR-IOV
            fail:
                msg: "This resource type can be used only with SR-IOV"
            when:
                - resources_type is regex("sriov.*") and not is_sriov|bool

          - name: Create resources
            include_role:
                name: create-resources
            vars:
                public_network_name: "{{ public_net }}"
                image_name: "{{ image_to_boot }}"
                flavor_name: "{{ flavor_to_use }}"
                ovn_migration_temp_dir: /home/stack/ovn_migration
                dvr: is_dvr|bool
                sriov: is_sriov|bool

          - name: Stop existing VMs
            shell: |
                source {{ overcloudrc }}
                openstack server list --all -c ID -f value | xargs -n1 openstack server stop || true
            when: shutdown_workload|bool

        when: create_vms|bool

- name: Pre-migration configuration of nodes
  hosts: undercloud
  tasks:
      - name: Switch firewall driver
        include_role:
            name: switch-firewall-driver
        vars:
            node_ssh_user: "{{ overcloud_ssh_user }}"
            temp_dir: /home/stack/fw_driver_switch
        when: install.fix_firewall_driver|bool

- name: Kick start the migration
  hosts: undercloud
  tasks:
      #TODO: Get the working dir from the param
      - name: Starting migration block
        block:
            - name: Set ovn migration working dir
              set_fact:
                  ovn_migration_working_dir: /home/stack/ovn_migration

            - name: Copy the playbook files into ovn_migration working dir
              command: cp -rf {{ playbooks_path }} {{ ovn_migration_working_dir }}
              when: not batched_migration_support|bool

            - name: Fix controller group name for backup and restore
              shell: |
                  tasks_file={{ ovn_migration_working_dir }}/playbooks/roles/recovery-backup/tasks/main.yml
                  sed -i "/tripleo_backup_and_restore_server/i \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \"tripleo_controller_group_name\": ControllerSriov," $tasks_file
                  sed -i "/--inventory.*inventory.yaml$/a \ \ \ \ \ \ \ \ --extra-vars '{\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \"tripleo_controller_group_name\": ControllerSriov\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ }'" $tasks_file
                  sed -i "s/\(^.*--inventory.*inventory.yaml\)$/\1\ \\\/" $tasks_file
              when: install.fix_controller_group_name_for_sriov|bool

            - name: Fix subnet for backup and restore
              shell: |
                  net=$(echo {{ install.backup_migration_ip }} | awk -F"." '{print $1"."$2"."$3".0/24"}')
                  sed -i "/tripleo_backup_and_restore_server/i \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \"tripleo_backup_and_restore_clients_nets\": [$net]," /usr/share/ansible/neutron-ovn-migration/playbooks/roles/recovery-backup/tasks/main.yml
              when: install.fix_subnet_for_backup|bool
              become: true

            - name: Create ovn migration script
              template:
                  src: templates/run-ovn-migration-cmd.sh.j2
                  dest: "{{ ovn_migration_working_dir }}/run-ovn-migration-cmd.sh"
                  mode: 0755

            - name: Generate dumping objects script
              template:
                  src: templates/dump-objects.sh.j2
                  dest: "{{ ovn_migration_working_dir }}/dump-objects.sh"
                  mode: 0755
              when: install.dump_objects|bool

            - name: Run dumping objects script to save initial state
              shell:
                  set -o pipefail &&
                  {{ ovn_migration_working_dir }}/dump-objects.sh initial_state full
                  > {{ ovn_migration_working_dir }}/dumps/dump-objects_initial_state.sh.log 2>&1
              when: install.dump_objects|bool

            - name: Generate inventory file for ovn migration
              shell:
                  set -o pipefail &&
                  {{ ovn_migration_working_dir }}/run-ovn-migration-cmd.sh generate-inventory > {{ ovn_migration_working_dir }}/generate-inventory.log 2>&1

            - name: Create backup when using updated ovn_migration.sh script (with batched support)
              shell:
                  set -o pipefail &&
                  {{ ovn_migration_working_dir }}/run-ovn-migration-cmd.sh backup > {{ ovn_migration_working_dir }}/create_backup.log 2>&1
              when:
                  - install.create_backup|bool
                  - batched_migration_support|bool

            - name: Copy default batches config
              copy:
                  src: templates/batches_default_config
                  dest: /tmp/batches_config
              when:
                  - batched_migration_support|bool

            - name: Append batches configuration
              shell: |
                  [ "{{ install.batches_config }}" != "" ] && curl -Lo /tmp/batches_config {{ install.batches_config }}
                  echo >> ~/hosts_for_migration
                  cat /tmp/batches_config >> ~/hosts_for_migration
              when:
                  - batched_migration_support|bool

            - name: Download batched scenario tasks
              delegate_to: localhost
              get_url:
                  url: "{{ install.batched_scenario_tasks }}"
                  dest: "./batched_scenario_tasks.yml"
                  force: true
              when:
                  - batched_migration_support|bool
                  - install.batched_scenario_tasks != ''

            - name: Set MTU T1
              shell:
                  set -o pipefail &&
                  {{ ovn_migration_working_dir }}/run-ovn-migration-cmd.sh setup-mtu-t1 > {{ ovn_migration_working_dir }}/setup-mtu-t1.log 2>&1
              when:
                  - reduce_mtu|bool

            - name: Reduce mtu of the pre migration networks
              shell:
                  set -o pipefail &&
                  {{ ovn_migration_working_dir }}/run-ovn-migration-cmd.sh reduce-mtu > {{ ovn_migration_working_dir }}/reduce-mtu.log 2>&1
              when: reduce_mtu|bool

            - name: Create MTU check script
              template:
                  src: templates/ensure_mtu_is_updated_in_vms.sh.j2
                  dest: "{{ ovn_migration_working_dir }}/ensure_mtu_is_updated_in_vms.sh"
                  mode: 0755
              when:
                  - reduce_mtu|bool
                  - install.ensure_mtu_is_updated|bool

            - name: Run MTU check script
              shell:
                  set -o pipefail &&
                  {{ ovn_migration_working_dir }}/ensure_mtu_is_updated_in_vms.sh
                  > {{ validations_dir }}/ensure_mtu_is_updated_in_vms.sh.log 2>&1
              when:
                  - reduce_mtu|bool
                  - install.ensure_mtu_is_updated|bool

            - name: Start pinger in background
              shell: >
                  nohup {{ ovn_migration_working_dir }}/start-pinger.sh </dev/null >/dev/null 2>&1 &
              changed_when: False
              when:
                  - not shutdown_workload|bool
                  - install.ensure_mtu_is_updated|bool

            - name: Start requester in background
              shell: >
                  nohup {{ ovn_migration_working_dir }}/start-requester.sh </dev/null >/dev/null 2>&1 &
              changed_when: False
              when:
                  - loadbalancer|bool
                  - not shutdown_workload|bool
                  - install.ensure_mtu_is_updated|bool

            - name: Create network agents validation script
              template:
                  src: templates/validate-network-agents.sh.j2
                  dest: "{{ ovn_migration_working_dir }}/validate-network-agents.sh"
                  mode: 0755
              when: validate_agents|bool

            - name: Run network agents validation script
              shell:
                  set -o pipefail &&
                  {{ ovn_migration_working_dir }}/validate-network-agents.sh ovs
                  > {{ validations_dir }}/validate-network-agents_ovs_before_migration.sh.log 2>&1
              when:  validate_agents|bool

            - name: Run dumping objects script before ovn migration
              shell:
                  set -o pipefail &&
                  {{ ovn_migration_working_dir }}/dump-objects.sh before_ovn_migration
                  > {{ ovn_migration_working_dir }}/dumps/dump-objects_before_ovn-migration.sh.log 2>&1
              when: install.dump_objects|bool

            - name: Start the migration process
              shell:
                  set -o pipefail &&
                  {{ ovn_migration_working_dir }}/run-ovn-migration-cmd.sh start-migration
                  > {{ ovn_migration_working_dir }}/run-ovn-migration-cmd.sh.log 2>&1
              when: not batched_migration_support|bool

            - name: Start the migration process (batched)
              shell:
                  set -o pipefail &&
                  {{ ovn_migration_working_dir }}/run-ovn-migration-cmd.sh install-ovn
                  > {{ ovn_migration_working_dir }}/install-ovn.sh.log 2>&1
              when: batched_migration_support|bool

            - name: Activate OVN (batched, all_at_once)
              shell:
                  set -o pipefail &&
                  {{ ovn_migration_working_dir }}/run-ovn-migration-cmd.sh activate-ovn
                  > {{ ovn_migration_working_dir }}/activate-ovn.sh.log 2>&1
              when:
                  - batched_migration_support|bool
                  - install.batched_scenario_tasks == ''

            - name: Execute batched migration scenario tasks
              include_tasks: ./batched_scenario_tasks.yml
              when:
                  - batched_migration_support|bool
                  - install.batched_scenario_tasks != ''

            - name: Cleanup OVS (batched)
              shell:
                  set -o pipefail &&
                  {{ ovn_migration_working_dir }}/run-ovn-migration-cmd.sh cleanup-ovs
                  > {{ ovn_migration_working_dir }}/cleanup-ovs.sh.log 2>&1
              when: batched_migration_support|bool

            - name: Run dumping objects script after migration to ovn
              shell:
                  set -o pipefail &&
                  {{ ovn_migration_working_dir }}/dump-objects.sh after_ovn_migration
                  > {{ ovn_migration_working_dir }}/dumps/dump-objects_after_ovn-migration.sh.log 2>&1
              when: install.dump_objects|bool

        when: migrate|bool

- name: Execute ReaR to restore all controllers
  import_playbook: roles/revert/tasks/restore_controllers.yml
  vars:
    osp_version: "{{ hostvars['undercloud-0']['ansible_facts']['osp_major_version'] }}"
  when:
      - install.revert_to_ovs|bool

- name: Revert OVN to OVS
  hosts: undercloud
  tasks:
      - name: Starting migration block
        block:

            - name: Generate prepare-pinger script
              template:
                  src: roles/create-resources/templates/prepare-pinger.sh.j2
                  dest: "{{ ovn_migration_working_dir }}/prepare-pinger.sh"
                  mode: 0744
                  backup: true

            - name: Execute prepare-pinger script
              shell: >
                  {{ ovn_migration_working_dir }}/prepare-pinger.sh </dev/null >
                  {{ ovn_migration_working_dir }}/prepare-pinger-{{ validations_type }}.sh.log 2>&1
              changed_when: False
              when: not shutdown_workload|bool

            - name: Start pinger in background
              shell:
                  set -o pipefail && rm -rf {{ ovn_migration_working_dir }}/_pinger_cmd.txt &&  nohup {{ ovn_migration_working_dir }}/start-pinger.sh
                  > {{ ovn_migration_working_dir }}/start-pinger-{{ validations_type }}.sh.log 2>&1 &
              changed_when: False
              when: not shutdown_workload|bool

            - name: Generate subport-pinger script
              template:
                src: templates/start-subport-pingers.sh.j2
                dest: "{{ ovn_migration_working_dir }}/start-subport-pinger.sh"
                mode: 0744
              when: not shutdown_workload|bool

            - name: Execute subport-pinger script
              shell: >
                  set -o pipefail &&  {{ ovn_migration_working_dir }}/start-subport-pinger.sh </dev/null >
                  {{ ovn_migration_working_dir }}/start-subport-pinger-{{ validations_type }}.sh.log 2>&1
              changed_when: False
              when: not shutdown_workload|bool

            - name: Revert to OVS
              include_role:
                  name: revert

            - name: Run dumping objects script after restoring ovs
              shell:
                  set -o pipefail &&
                  {{ ovn_migration_working_dir }}/dump-objects.sh after_ovs_restore full
                  > {{ ovn_migration_working_dir }}/dumps/dump-objects_after_restoring_ovs.sh.log 2>&1
              when: install.dump_objects|bool

        when: install.revert_to_ovs|bool

- name: Stop DHCP server on external network for post-revert tempest testing
  hosts: hypervisor
  tasks:
      - name: Stop DHCP server
        shell: |
            procs=$(ps aux | grep external | grep -v root | grep dnsmasq | grep -v grep | awk '{print $2}')
            for p in $procs; do
              kill $p || true
            done
        when:
            - install.revert_to_ovs|bool
            - not install.sriov|bool
            - install.fix_external_dhcp_ovs|bool

- name: Configure static IP address on undercloud for post-revert tempest testing
  hosts: undercloud
  tasks:
      - name: Configure static IP address on undercloud
        shell: |
            sudo nmcli con add type ethernet con-name custom_connection ifname eth2
            ip add show dev eth2 | grep inet | grep -v inet6 | tr -s ' ' | cut -d ' ' -f 3 | xargs -I N sudo nmcli con modify custom_connection ipv4.address N
            sudo nmcli con modify custom_connection ipv4.method static
            ip add show dev eth2 | grep inet6 | grep -v fe80 | tr -s ' ' | cut -d ' ' -f 3 | cut -d '/' -f 1 | xargs -I N sudo nmcli con modify custom_connection ipv6.address N/64
            sudo nmcli con modify custom_connection ipv6.method manual
            sudo nmcli con up custom_connection
        when:
            - install.revert_to_ovs|bool
            - not install.sriov|bool
            - install.fix_external_dhcp_ovs|bool

- name: Post migration
  hosts: undercloud
  tasks:
      - name: Starting post-migration tasks
        block:
            - name: Set necessary facts
              set_fact:
                  validations_report_file: "{{ validations_type }}.xml"

            - name : Create validation directory if not present
              file:
                  state: directory
                  path: "{{ validations_dir }}"

            - name: Get status of existing VMs
              shell: |
                  source {{ overcloudrc }}
                  openstack server list
              when:
                  - create_vms|bool
                  - shutdown_workload|bool

            - name: Start existing VMs
              shell: |
                  source {{ overcloudrc }}
                  openstack server list --all -c ID -f value | xargs -n1 openstack server start || true
                  sleep 90
              when:
                  - create_vms|bool
                  - shutdown_workload|bool

            - name: Start pinger in background
              shell: |
                  nohup {{ ovn_migration_working_dir }}/start-pinger.sh </dev/null >/dev/null 2>&1 &
                  sleep 120
              changed_when: False
              when:
                  - create_vms|bool
                  - shutdown_workload|bool

            - name: Stop pinger if started
              shell:
                  echo "exit" > {{ ovn_migration_working_dir }}/_pinger_cmd.txt

            - name: Validate pinger results if exist
              shell:
                  set -o pipefail &&
                  {{ ovn_migration_working_dir }}/validate-pinger.sh {{ validations_type }}
                  > {{ validations_dir }}/validate-pinger.sh.log 2>&1

            - name: Run OVN network agents validation script
              shell:
                  set -o pipefail &&
                  {{ ovn_migration_working_dir }}/validate-network-agents.sh ovn
                  > {{ validations_dir }}/validate-network-agents_ovn.sh.log 2>&1
              when:
                  - validate_agents|bool
                  - not install.revert_to_ovs|bool

            - name: Run OVS network agents validation script
              shell:
                  set -o pipefail &&
                  {{ ovn_migration_working_dir }}/validate-network-agents.sh ovs after_revert
                  > {{ validations_dir }}/validate-network-agents_ovs_after_revert.sh.log 2>&1
              when:
                  - validate_agents|bool
                  - install.revert_to_ovs|bool

            - name: Validate network type
              shell:
                  set -o pipefail &&
                  {{ ovn_migration_working_dir }}/validate-network.sh
                  > {{ validations_dir }}/validate-network.sh.log 2>&1
              when:
                  - create_vms|bool
                  - not is_sriov|bool
                  - set_geneve|bool
                  - not install.revert_to_ovs|bool

            - name: Validate load balancer status
              shell:
                  set -o pipefail &&
                  {{ ovn_migration_working_dir }}/validate-loadbalancer.sh
                  > {{ validations_dir }}/validate-loadbalancer.sh.log 2>&1
              when:
                  - create_vms|bool
                  - loadbalancer|bool

            - name: Create nodes validation script
              template:
                  src: templates/validate-nodes.sh.j2
                  dest: "{{ ovn_migration_working_dir }}/validate-nodes.sh"
                  mode: 0755
              when:
                  - validate_nodes|bool
                  - not install.revert_to_ovs|bool

            - name: Run nodes validation script
              shell:
                  set -o pipefail &&
                  {{ ovn_migration_working_dir }}/validate-nodes.sh
                  > {{ validations_dir }}/validate-nodes.sh.log 2>&1
              when:
                  - validate_nodes|bool
                  - not install.revert_to_ovs|bool

            - name: Create pcs status validation script
              template:
                  src: templates/validate-pcs-status.sh.j2
                  dest: "{{ ovn_migration_working_dir }}/validate-pcs-status.sh"
                  mode: 0755
              when: validate_pcs_status|bool

            - name: Run pcs status validation script
              shell:
                  set -o pipefail &&
                  {{ ovn_migration_working_dir }}/validate-pcs-status.sh
                  > {{ validations_dir }}/validate-pcs-status.sh.log 2>&1
              when:  validate_pcs_status|bool

            - name: Create workload operations validation script
              template:
                  src: templates/validate-workload-operations.sh.j2
                  dest: "{{ ovn_migration_working_dir }}/validate-workload-operations.sh"
                  mode: 0755
              when: validate_vm_cold_migration|bool or validate_vm_live_migration|bool or validate_vm_migration|bool or validate_vm_reboot|bool

            - name: Run workload operations validation script
              shell:
                  set -o pipefail &&
                  {{ ovn_migration_working_dir }}/validate-workload-operations.sh
                  > {{ validations_dir }}/validate-workload-operations.sh.log 2>&1
              when: validate_vm_live_migration|bool or validate_vm_reboot|bool

            - name: Create script for generating junit report
              template:
                  src: templates/create-junit-report.sh.j2
                  dest: "{{ ovn_migration_working_dir }}/create-junit-report.sh"
                  mode: 0755
              when: fetch_junit_xml|bool

            - name: Create junit report
              shell:
                  set -o pipefail &&
                  {{ ovn_migration_working_dir }}/create-junit-report.sh {{ validations_report_file }}
                  > {{ ovn_migration_working_dir }}/create-junit-report.sh.log 2>&1
              when: fetch_junit_xml|bool

            - name: Fetch junit XML results file
              fetch:
                  src: "{{ ovn_migration_working_dir }}/{{ validations_report_file }}"
                  dest: ".workspaces/active/{{ validations_report_file }}"
                  flat: yes
                  fail_on_missing: yes
              when: fetch_junit_xml|bool

        when: not install.skip_validations|bool

- name: Cleanup
  hosts: undercloud
  tasks:
      - name: Create resources cleanup script
        template:
            src: templates/delete-resources.sh.j2
            dest: "{{ ovn_migration_working_dir }}/delete-resources.sh"
            mode: 0755
        when:
            - create_vms|bool
            - install.delete_workload|bool

      - name: Run resources cleanup script
        shell:
            set -o pipefail &&
            {{ ovn_migration_working_dir }}/delete-resources.sh
            > {{ ovn_migration_working_dir }}/delete-resources.sh.log 2>&1
        when:
            - create_vms|bool
            - install.delete_workload|bool
