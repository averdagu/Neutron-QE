# Playbook which preps migration and then invokes the migration script.

- name: Set necessary facts
  hosts: undercloud
  tasks:
      - name: Set necessary facts (infrared deployment)
        set_fact:
            migrate: "{{ install.migrate }}"
            stack_name: "{{ install.stack_name }}"
            overcloud_ssh_user: "{{ install.overcloud_ssh_user }}"
            reduce_mtu: "{{ install.reduce_mtu }}"
            create_validation_workload: "{{ install.create_validation_workload }}"
            export_image: "{{ install.export_image }}"
            image_to_boot: "{{ install.image_name }}"
            flavor_to_use: "{{ install.flavor_name }}"
            server_user_name: "{{ install.server_user_name }}"
            packet_loss_threshold: "{{ install.allowed_packet_loss }}"
            validate_agents: "{{ install.validate_agents }}"
            validate_nodes: "{{ install.validate_nodes }}"
            validate_pcs_status: "{{ install.validate_pcs_status }}"
            validate_vm_cold_migration: "{{ install.validate_vm_cold_migration }}"
            validate_vm_live_migration: "{{ install.validate_vm_live_migration }}"
            validate_vm_migration: "{{ install.validate_vm_migration }}"
            validate_vm_reboot: "{{ install.validate_vm_reboot }}"
            fetch_junit_xml: "{{ install.fetch_junit_xml }}"
        when: install is defined

      - name: Set necessary facts (Tripleo deployment)
        set_fact:
            migrate: "{{ migrate }}"
            stack_name: "{{ stack_name }}"
            overcloud_ssh_user: "{{ overcloud_ssh_user }}"
            reduce_mtu: "{{ reduce_mtu }}"
            create_validation_workload: "{{ create_validation_workload }}"
            export_image: "{{ export_image }}"
            image_to_boot: "{{ image_name }}"
            flavor_to_use: "{{ flavor_name }}"
            server_user_name: "{{ server_user_name }}"
            packet_loss_threshold: "{{ allowed_packet_loss }}"
            validate_agents: "{{ validate_agents }}"
            validate_nodes: "{{ validate_nodes }}"
            validate_pcs_status: "{{ validate_pcs_status }}"
            validate_vm_cold_migration: "{{ validate_vm_cold_migration }}"
            validate_vm_live_migration: "{{ validate_vm_live_migration }}"
            validate_vm_migration: "{{ validate_vm_migration }}"
            validate_vm_reboot: "{{ validate_vm_reboot }}"
            fetch_junit_xml: "{{ fetch_junit_xml }}"
        when: install is not defined

      - name: Set ovn migration working dir
        set_fact:
            ovn_migration_working_dir: /home/stack/ovn_migration

      - name: Set overcloudrc
        set_fact:
            overcloudrc: "/home/stack/{{ stack_name }}rc"

      - name: Get rhel repo file
        shell: |
            basename `ls -1 /etc/yum.repos.d/*rhel* | sort -r | head -1 `
        register: rhel_repo_file

      - name: Set rhel repo file name
        set_fact:
            rhel_repo_file_name: "{{ rhel_repo_file.stdout }}"
            cacheable: yes

- name: Set repos on controllers in order to be able to deploy a backup tool
  hosts: controller
  tasks:
      - name: Set rhel repo on controllers
        shell: |
            repo_file={{ hostvars['undercloud-0']['ansible_facts']['rhel_repo_file_name'] }}
            sshpass -p 'stack' timeout 10 scp -o StrictHostKeyChecking=no stack@{{ install.backup_migration_ip }}:/etc/yum.repos.d/$repo_file /tmp
            if [ ! -s /etc/yum.repos.d/$repo_file ]; then
            sudo cp /tmp/$repo_file /etc/yum.repos.d/
            fi
        when: install.create_backup|bool

- name: Install migration tool
  hosts: undercloud
  become: true
  vars:
    python_major_version: "{{ ansible_facts.python_version.split('.')[0] }}"
  tasks:
      - name: Install python 2 virtualenv and networking ovn migration tool
        yum:
            name:
              - python-virtualenv
              - python-networking-ovn-migration-tool
              - bc
            state: present
        when: python_major_version | int == 2

      - name: Install python 3 networking ovn migration tool
        yum:
            name:
              - python3-networking-ovn-migration-tool
              - bc
            state: present
        when: python_major_version | int == 3

      - name: Set host_key_checking to False in ansible.cfg
        ini_file:
            path=/etc/ansible/ansible.cfg
            section=defaults
            option=host_key_checking
            value=False
        ignore_errors: yes

      - name: Get openstack version from puddle
        shell: |
            sed 's/RHOS-\(.*\)-RHEL.*/\1/g' /home/stack/core_puddle_version
        register: puddle_version_output

      - set_fact:
            osp_major_version: "{{ puddle_version_output.stdout.split('.')[0] }}"

      - set_fact:
            playbooks_path: '/usr/share/ansible/networking-ovn-migration/playbooks'
        when: osp_major_version | int < 17

      - set_fact:
            playbooks_path: '/usr/share/ansible/neutron-ovn-migration/playbooks'
        when: osp_major_version | int >= 17

      - set_fact:
            workload_script: "{{ playbooks_path }}/roles/resources/create/templates/create-resources.sh.j2"

      - name: Apply workarounds
        block:
            - name: Apply workaround for flavor size
              shell: |
                  sed -i 's/\(\-\-disk\ 1\)\ /\10/g' {{ workload_script }}
              when: install.patch_flavor_size|bool

            - name: Apply workaround for trunks cleanup
              shell: |
                  sed -i '/Cleanup neutron trunk/a \ \ ignore_errors:\ True' {{ playbooks_path }}/roles/migration/tasks/cleanup-dataplane.yml
              when: install.fix_trunks_cleanup|bool

            - name: Inject code to print workload VM console
              shell: |
                  sed -i "/exit\ 1/i server_id=\$(openstack server list -f value | grep \$server_ip | awk '{print \$1}')\nopenstack console log show \$server_id" {{ playbooks_path }}/roles/resources/create/templates/create-resources.sh.j2
              when: install.print_vm_console_on_fail|bool

            - name: Apply fix for ansible inventory
              shell: |
                  curl -Lo /home/stack/ovn_migration.sh http://file.tlv.redhat.com/~rsafrono/files/ovn_migration.sh
                  mv /usr/bin/ovn_migration.sh /usr/bin/ovn_migration.sh.bak
                  mv /home/stack/ovn_migration.sh /usr/bin/
                  chmod +x /usr/bin/ovn_migration.sh
              when: install.fix_ansible_inventory|bool

            - name: Apply fix for systemctl daemon after removal
              shell: |
                  sed -i "/remove\ containers/i -\ name:\ Reload\ systemctl\ daemons\n\ \ systemd:\n\ \ \ \ daemon_reload:\ yes\n" {{ playbooks_path }}/roles/stop-agents/tasks/main.yml
              when: install.fix_systemctl_daemon

            - name: Apply fix for tmp dir executable
              shell: |
                  sed -i 's/0744/0644/' {{ playbooks_path }}/roles/migration/tasks/activate-ovn.yml
                  sed -i 's/\(.*log\)/\ \ \ \ sh\ \1/' {{ playbooks_path }}/roles/migration/tasks/activate-ovn.yml
                  sed -i 's/0744/0644/' {{ playbooks_path }}/roles/migration/tasks/clone-dataplane.yml
                  sed -i 's/\(shell:\)\(.*\)/\1\ sh\ \2/' {{ playbooks_path }}/roles/migration/tasks/clone-dataplane.yml
              when: install.fix_tmp_dir_exec|bool

            - name: Disable pre-checks
              shell: |
                  sed -i '/Pre\ migration\ checks/,+6 d' {{ playbooks_path }}/ovn-migration.yml
              when: install.disable_pre_checks

            - name: Apply patch for sg- fg- interfaces cleanup
              shell: |
                  sed -i 's/rfp-/rfp-|sg-|fg-/' {{ playbooks_path }}/roles/migration/tasks/cleanup-dataplane.yml
                  sed -i 's/rfp-/rfp-|sg-|fg-/' {{ playbooks_path }}/roles/migration/templates/clone-br-int.sh.j2
              when: install.apply_patch_for_sg_fg_cleanup|bool

            - name: Fix dhcp agents cleanup
              shell: |
                  awk -i inplace '{print} /become/ && !n {print "  when:\n    - ansible_facts.services[item] is defined\n    - ansible_facts.services[item][\"state\"] == \"running\""; n++}' {{ playbooks_path }}/roles/stop-agents/tasks/cleanup.yml
              when: install.fix_dhcp_agents_cleanup|bool

            - name: Fix exitcommand
              shell: |
                  sed -i "s/\['exitcommand'\]/.get('exitcommand', [])/" /usr/share/ansible/collections/ansible_collections/containers/podman/plugins/module_utils/podman/podman_container_lib.py
              when: install.fix_exitcommand|bool

            - name: Decrease user input timeout for backup and restore
              shell: |
                  sed -i '/BACKUP_PROG_COMPRESS_SUFFIX/a\ \ USER_INPUT_TIMEOUT: 5' /usr/share/ansible/roles/backup-and-restore/defaults/main.yml
                  sed -i '/USER_INPUT_TIMEOUT/a\ \ ISO_RECOVER_MODE: unattended' /usr/share/ansible/roles/backup-and-restore/defaults/main.yml
              when: install.create_backup|bool
        when: migrate|bool

- name: Prepare for migration
  hosts: undercloud
  tasks:
      - name: Delete temp file directory if present
        file:
            state: absent
            path: "{{ ovn_migration_working_dir }}"
        when: migrate|bool

      - name : Create temp file directory if not present
        file:
            state: directory
            path: "{{ ovn_migration_working_dir }}"
        when: migrate|bool

      - name: Set validations type, ovn migration
        set_fact:
            validations_type: "ovn_migration_validations"
        when: migrate|bool

      - name: Set validations directory, ovn migration
        set_fact:
            validations_dir: "{{ ovn_migration_working_dir }}/{{ validations_type }}"
        when: migrate|bool

      - name : Create validation directory if not present
        file:
            state: directory
            path: "{{ validations_dir }}"
        when: migrate|bool

      - name: Set necessary facts (infrared deployment)
        set_fact:
            is_dvr: "{{ install.dvr }}"
            is_sriov: "{{ install.sriov }}"
            is_after_ffu: "{{ install.after_ffu }}"
            support_jumbo_mtu: "{{ install.jumbo_mtu }}"
            has_networker: "{{ install.networker }}"
            has_vlan_transparency: "{{ install.vlan_transparency }}"
            has_igmp_snooping: "{{ install.igmp_snooping }}"
            neutron_dns_domain: "{{ install.neutron_dns_domain }}"
            set_geneve: "{{ install.geneve }}"
        when: install is defined

      - name: Set necessary facts (Tripleo deployment)
        set_fact:
            is_dvr: "{{ dvr }}"
            is_sriov: "{{ sriov }}"
            is_after_ffu: "{{ after_ffu }}"
            support_jumbo_mtu: "{{ jumbo_mtu }}"
            has_networker: "{{ networker }}"
            has_vlan_transparency: "{{ vlan_transparency }}"
            has_igmp_snooping: "{{ igmp_snooping }}"
            neutron_dns_domain: "{{ neutron_dns_domain }}"
            set_geneve: "{{ geneve }}"
        when: install is not defined

      - name: Fail if sriov and dvr specified together
        fail:
            msg: "Invalid arguments: --sriov True and --dvr True can not be used together"
        when:
            - is_sriov|bool and is_dvr|bool

      - name: Set the image registry information
        block:
            - name: Get the image registry info (infrared deployment)
              block:
                  - name: Set is_infrared deployment
                    set_fact:
                        is_infrared: True

              when:
                  - install is defined

            - name: Get the image registry info (tripleo deployment)
              block:
                  - name: Set is_infrared deployment
                    set_fact:
                        is_infrared: False

              when:
                  - install is not defined

      - name: Prepare for migration
        include_role:
           name: prepare-migration
        vars:
           infrared_deployment: "{{ is_infrared }}"
        when: migrate|bool

- name: Boot few VMs to measure downtime
  hosts: undercloud
  tasks:
      - name: Check if need to create resources
        block:
            - name: Set create_vms (infrared)
              set_fact:
                  create_vms: "{{ install.create_resources }}"
              when:
                - install is defined

            - name: Set create_vms (tripleo deployment)
              set_fact:
                  create_vms: "{{ create_resources }}"
              when:
                - install is not defined

      - name: Create few resources
        block:
            - name: Set facts for resources creation (infrared deployment)
              set_fact:
                  public_net: "{{ install.external_network }}"
                  resources_type: "{{ install.resources_type }}"
                  fix_mtu: "{{ install.fix_workload_mtu }}"
                  loadbalancer: "{{ install.create_loadbalancer }}"
                  shutdown_workload: "{{ install.shutdown_workload }}"
              when: install is defined

            - name: Set facts for resources creation (Tripleo deployment)
              set_fact:
                  public_net: "{{ external_network }}"
                  resources_type: "{{ resources_type }}"
                  fix_mtu: "{{ fix_workload_mtu }}"
                  loadbalancer: "{{ create_loadbalancer }}"
                  shutdown_workload: "{{ shutdown_workload }}"
              when: install is not defined

            - name: Fail if resources_type is dvr while environment is SR-IOV
              fail:
                  msg: "SR-IOV does not support dvr resources"
              when:
                  - resources_type == 'dvr' and is_sriov|bool

            - name: Fail if resources_type is dvr while target environment is not DVR
              fail:
                  msg: "DVR resources can be run only on DVR environment"
              when:
                  - resources_type == 'dvr' and not is_dvr|bool

            - name: Fail if resources_type is sriov* while environment is not SR-IOV
              fail:
                  msg: "This resource type can be used only with SR-IOV"
              when:
                  - resources_type is regex("sriov.*") and not is_sriov|bool

            - name: Create resources
              include_role:
                  name: create-resources
              vars:
                  public_network_name: "{{ public_net }}"
                  image_name: "{{ image_to_boot }}"
                  flavor_name: "{{ flavor_to_use }}"
                  ovn_migration_temp_dir: /home/stack/ovn_migration
                  dvr: is_dvr|bool
                  sriov: is_sriov|bool

            - name: Stop existing VMs
              shell: |
                  source {{ overcloudrc }}
                  openstack server list --all -c ID -f value | xargs -n1 openstack server stop || true
              when: shutdown_workload|bool

        when: create_vms|bool

- name: Pre-migration configuration of nodes
  hosts: undercloud
  tasks:
      - name: Switch firewall driver
        include_role:
            name: switch-firewall-driver
        vars:
            node_ssh_user: "{{ overcloud_ssh_user }}"
            temp_dir: /home/stack/fw_driver_switch
        when: install.fix_firewall_driver|bool

- name: Kick start the migration
  hosts: undercloud
  tasks:
      #TODO: Get the working dir from the param
      - name: Starting migration block
        block:
            - name: Set ovn migration working dir
              set_fact:
                  ovn_migration_working_dir: /home/stack/ovn_migration

            - name: Copy the playbook files into ovn_migration working dir
              command: cp -rf {{ playbooks_path }} {{ ovn_migration_working_dir }}

            - name: Delete temp directory for neutron if present
              file:
                  state: absent
                  path: /tmp/neutron
              when: install.inject_refspec_for_revert != ''

            - name : Create temp directory for neutron if not present
              file:
                  state: directory
                  path: /tmp/neutron
              when: install.inject_refspec_for_revert != ''

            - name: Clone upstream neutron repo to a temp directory
              git:
                  repo: 'https://review.opendev.org/openstack/neutron'
                  dest: /tmp/neutron
                  clone: yes
                  update: yes
              when: install.inject_refspec_for_revert != ''

            - name: Install playbooks for OVN migration revert
              shell: |
                  cd /tmp/neutron
                  git fetch https://review.opendev.org/openstack/neutron refs/changes/{{ install.inject_refspec_for_revert }} && git cherry-pick FETCH_HEAD
                  cp -rf tools/ovn_migration/tripleo_environment/playbooks/roles/configure-and-backup-controllers/ {{ ovn_migration_working_dir }}/playbooks/roles
                  cp -rf tools/ovn_migration/tripleo_environment/playbooks/roles/revert/ {{ ovn_migration_working_dir }}/playbooks/roles
                  cp -rf tools/ovn_migration/tripleo_environment/playbooks/ovn-migration.yml {{ ovn_migration_working_dir }}/playbooks
                  cp -rf tools/ovn_migration/tripleo_environment/playbooks/revert.yml {{ ovn_migration_working_dir }}/playbooks
                  cp -rf tools/ovn_migration/tripleo_environment/playbooks/roles/backup/tasks/main.yml {{ ovn_migration_working_dir }}/playbooks/roles/backup/tasks
                  if [ "{{ osp_major_version | int }}" == "17" ]; then
                    curl -Lo /home/stack/ovn_migration.sh http://file.tlv.redhat.com/~rsafrono/files/ovn_migration_revert.sh
                  else
                    curl -Lo /home/stack/ovn_migration.sh http://file.tlv.redhat.com/~rsafrono/files/ovn_migration_16.2_revert.sh
                  fi
                  sudo mv /usr/bin/ovn_migration.sh /usr/bin/ovn_migration.sh.bak
                  sudo mv /home/stack/ovn_migration.sh /usr/bin/
                  sudo chmod +x /usr/bin/ovn_migration.sh
                  sed -i '/Pre\ migration\ checks/,+6 d' {{ ovn_migration_working_dir }}/playbooks/ovn-migration.yml
              when: install.inject_refspec_for_revert != ''

            - name: Set the public network name (infrared deployment)
              set_fact:
                  public_network: "{{ install.external_network }}"
              when: install is defined

            - name: Set the public network name (Tripleo deployment)
              set_fact:
                  public_network: "{{ external_network }}"
              when: install is not defined

            - name: Create ovn migration script
              template:
                  src: templates/start-ovn-migration.sh.j2
                  dest: "{{ ovn_migration_working_dir }}/start-ovn-migration.sh"
                  mode: 0755

            - name: Generate inventory file for ovn migration
              shell:
                  set -o pipefail &&
                  {{ ovn_migration_working_dir }}/start-ovn-migration.sh generate-inventory > {{ ovn_migration_working_dir }}/generate-inventory.log 2>&1

            - name: Set MTU T1
              shell:
                  set -o pipefail &&
                  {{ ovn_migration_working_dir }}/start-ovn-migration.sh setup-mtu-t1 > {{ ovn_migration_working_dir }}/setup-mtu-t1.log 2>&1
              when: reduce_mtu|bool

            - name: Reduce mtu of the pre migration networks
              shell:
                  set -o pipefail &&
                  {{ ovn_migration_working_dir }}/start-ovn-migration.sh reduce-mtu > {{ ovn_migration_working_dir }}/reduce-mtu.log 2>&1
              when: reduce_mtu|bool

            - name: Create network agents validation script
              template:
                  src: templates/validate-network-agents.sh.j2
                  dest: "{{ ovn_migration_working_dir }}/validate-network-agents.sh"
                  mode: 0755
              when: validate_agents|bool

            - name: Run network agents validation script
              shell:
                  set -o pipefail &&
                  {{ ovn_migration_working_dir }}/validate-network-agents.sh ovs
                  > {{ validations_dir }}/validate-network-agents_ovs_before_migration.sh.log 2>&1
              when:  validate_agents|bool

            - name: Start the migration process
              shell:
                  set -o pipefail &&
                  {{ ovn_migration_working_dir }}/start-ovn-migration.sh start-migration
                  > {{ ovn_migration_working_dir }}/start-ovn-migration.sh.log 2>&1
        when: migrate|bool

- name: Execute ReaR to restore all controllers
  import_playbook: roles/revert/tasks/restore_controllers.yml
  when:
      - install.revert_to_ovs|bool

- name: Revert OVN to OVS
  hosts: undercloud
  tasks:
      - name: Revert to OVS
        include_role:
            name: revert
        when:
            - install.revert_to_ovs|bool

- name: Stop DHCP server on external network for post-revert tempest testing
  hosts: hypervisor
  tasks:
      - name: Stop DHCP server
        shell: |
            ps aux | grep external | grep -v root | tr -s ' ' | cut -d ' ' -f 2 | xargs kill -15
        when: install.revert_to_ovs|bool

- name: Configure static IP address on undercloud for post-revert tempest testing
  hosts: undercloud
  tasks:
      - name: Configure static IP address on undercloud
        shell: |
            sudo nmcli con add type ethernet con-name custom_connection ifname eth2
            ip add show dev eth2 | grep inet | grep -v inet6 | tr -s ' ' | cut -d ' ' -f 3 | xargs -I N sudo nmcli con modify custom_connection ipv4.address N
            sudo nmcli con modify custom_connection ipv4.method static
            ip add show dev eth2 | grep inet6 | grep -v fe80 | tr -s ' ' | cut -d ' ' -f 3 | cut -d '/' -f 1 | xargs -I N sudo nmcli con modify custom_connection ipv6.address N/64
            sudo nmcli con modify custom_connection ipv6.method manual
            sudo nmcli con up custom_connection
        when: install.revert_to_ovs|bool

- name: Post migration
  hosts: undercloud
  tasks:
      - name: Starting post-migration tasks
        block:

            - name: Set validations type, revert to ovs
              set_fact:
                  validations_type: "ovn_migration_revert_validations"
              when: install.revert_to_ovs|bool

            - name: Set necessary facts
              set_fact:
                  validations_dir: "{{ ovn_migration_working_dir }}/{{ validations_type }}"
                  validations_report_file: "{{ validations_type }}.xml"

            - name : Create validation directory if not present
              file:
                  state: directory
                  path: "{{ validations_dir }}"

            - name: Get status of existing VMs
              shell: |
                  source {{ overcloudrc }}
                  openstack server list
              when:
                  - create_vms|bool
                  - shutdown_workload|bool

            - name: Start existing VMs
              shell: |
                  source {{ overcloudrc }}
                  openstack server list --all -c ID -f value | xargs -n1 openstack server start || true
                  sleep 90
              when:
                  - create_vms|bool
                  - shutdown_workload|bool

            - name: Start pinger in background
              shell: |
                  nohup {{ ovn_migration_working_dir }}/start-pinger.sh </dev/null >/dev/null 2>&1 &
                  sleep 120
              changed_when: False
              when:
                  - create_vms|bool
                  - shutdown_workload|bool

            - name: Stop pinger if started
              shell:
                  echo "exit" > {{ ovn_migration_working_dir }}/_pinger_cmd.txt

            - name: Validate pinger results if exist
              shell:
                  set -o pipefail &&
                  {{ ovn_migration_working_dir }}/validate-pinger.sh
                  > {{ validations_dir }}/validate-pinger.sh.log {{ validations_type }}  2>&1
              when: create_vms|bool

            - name: Run OVN network agents validation script
              shell:
                  set -o pipefail &&
                  {{ ovn_migration_working_dir }}/validate-network-agents.sh ovn
                  > {{ validations_dir }}/validate-network-agents_ovn.sh.log 2>&1
              when:
                  - validate_agents|bool
                  - not install.revert_to_ovs|bool

            - name: Run OVS network agents validation script
              shell:
                  set -o pipefail &&
                  {{ ovn_migration_working_dir }}/validate-network-agents.sh ovs after_revert
                  > {{ validations_dir }}/validate-network-agents_ovs_after_revert.sh.log 2>&1
              when:
                  - validate_agents|bool
                  - install.revert_to_ovs|bool

            - name: Validate network type
              shell:
                  set -o pipefail &&
                  {{ ovn_migration_working_dir }}/validate-network.sh
                  > {{ validations_dir }}/validate-network.sh.log 2>&1
              when:
                  - create_vms|bool
                  - not is_sriov|bool
                  - set_geneve|bool
                  - not install.revert_to_ovs|bool

            - name: Validate load balancer status
              shell:
                  set -o pipefail &&
                  {{ ovn_migration_working_dir }}/validate-loadbalancer.sh
                  > {{ validations_dir }}/validate-loadbalancer.sh.log 2>&1
              when:
                  - create_vms|bool
                  - loadbalancer|bool

            - name: Create nodes validation script
              template:
                  src: templates/validate-nodes.sh.j2
                  dest: "{{ ovn_migration_working_dir }}/validate-nodes.sh"
                  mode: 0755
              when:
                  - validate_nodes|bool
                  - not install.revert_to_ovs|bool

            - name: Run nodes validation script
              shell:
                  set -o pipefail &&
                  {{ ovn_migration_working_dir }}/validate-nodes.sh
                  > {{ validations_dir }}/validate-nodes.sh.log 2>&1
              when:
                  - validate_nodes|bool
                  - not install.revert_to_ovs|bool

            - name: Create pcs status validation script
              template:
                  src: templates/validate-pcs-status.sh.j2
                  dest: "{{ ovn_migration_working_dir }}/validate-pcs-status.sh"
                  mode: 0755
              when: validate_pcs_status|bool

            - name: Run pcs status validation script
              shell:
                  set -o pipefail &&
                  {{ ovn_migration_working_dir }}/validate-pcs-status.sh
                  > {{ validations_dir }}/validate-pcs-status.sh.log 2>&1
              when:  validate_pcs_status|bool

            - name: Create workload operations validation script
              template:
                  src: templates/validate-workload-operations.sh.j2
                  dest: "{{ ovn_migration_working_dir }}/validate-workload-operations.sh"
                  mode: 0755
              when: validate_vm_cold_migration|bool or validate_vm_live_migration|bool or validate_vm_migration|bool or validate_vm_reboot|bool

            - name: Run workload operations validation script
              shell:
                  set -o pipefail &&
                  {{ ovn_migration_working_dir }}/validate-workload-operations.sh
                  > {{ validations_dir }}/validate-workload-operations.sh.log 2>&1
              when: validate_vm_live_migration|bool or validate_vm_reboot|bool

            - name: Create script for generating junit report
              template:
                  src: templates/create-junit-report.sh.j2
                  dest: "{{ ovn_migration_working_dir }}/create-junit-report.sh"
                  mode: 0755
              when: fetch_junit_xml|bool

            - name: Create junit report
              shell:
                  set -o pipefail &&
                  {{ ovn_migration_working_dir }}/create-junit-report.sh {{ validations_report_file }}
                  > {{ ovn_migration_working_dir }}/create-junit-report.sh.log 2>&1
              when: fetch_junit_xml|bool

            - name: Fetch junit XML results file
              fetch:
                  src: "{{ ovn_migration_working_dir }}/{{ validations_report_file }}"
                  dest: ".workspaces/active/{{ validations_report_file }}"
                  flat: yes
                  fail_on_missing: yes
              when: fetch_junit_xml|bool

        when: not install.skip_validations|bool

- name: Cleanup
  hosts: undercloud
  tasks:
      - name: Create resources cleanup script
        template:
            src: templates/delete-resources.sh.j2
            dest: "{{ ovn_migration_working_dir }}/delete-resources.sh"
            mode: 0755
        when:
            - create_vms|bool
            - is_sriov|bool

      - name: Run resources cleanup script
        shell:
            set -o pipefail &&
            {{ ovn_migration_working_dir }}/delete-resources.sh
            > {{ ovn_migration_working_dir }}/delete-resources.sh.log 2>&1
        when:
            - create_vms|bool
            - is_sriov|bool
